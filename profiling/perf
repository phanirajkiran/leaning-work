http://lwn.net/Articles/513317/
https://perf.wiki.kernel.org/index.php/Tutorial
http://www.linux-kvm.org/page/Perf_events

---------------------------
CONFIG_HAVE_PERF_EVENTS=y
CONFIG_PERF_EVENTS=y
---------------------------



perf stat ./hog

缺省情况下，除了 task-clock-msecs 之外，perf stat 还给出了其他几个最常用的统计信息：

Task-clock-msecs：CPU 利用率，该值高，说明程序的多数时间花费在 CPU 计算上而非 IO。

Context-switches：进程切换次数，记录了程序运行过程中发生了多少次进程切换，频繁的进程切换是应该避免的。

Cache-misses：程序运行过程中总体的 cache 利用情况，如果该值过高，说明程序的 cache 利用不好

CPU-migrations：表示进程 t1 运行过程中发生了多少次 CPU 迁移，即被调度器从一个 CPU 转移到另外一个 CPU 上运行。

Cycles：处理器时钟，一条机器指令可能需要多个 cycles，

Instructions: 机器指令数目。

IPC：是 Instructions/Cycles 的比值，该值越大越好，说明程序充分利用了处理器的特性。

Cache-references: cache 命中的次数

Cache-misses: cache 失效的次数。

#perf stat -B -e cache-references,cache-misses,cycles,instructions,branches,faults,migrations sleep 5
-B, --big-num
      print large numbers with thousands' separators according to locale

The default set of events did not include cache events, matching your results, I don't know why

#perf stat -B sleep 5


-------------------------------------------------------------- 
perf record -e cpu-clock -g ./hog 
perf report 

 ||||||||||||

perf record -e cycles ./hog count=100000
perf record -e cycles:u ./hog count=100000
perf record -e cycles:k ./hog count=100000
perf report 

|||||||||||||||||||||||||||

perf record -e cycles,instructions,cache-misses ./hog

||||||||||||||||||||||||||||||||

perf record -Tg -e migrations -fo /tmp/perf.data ./load1.sh
perf script -i /tmp/perf.data

       -T, --timestamp
           Sample timestamps. Use it with perf report -D to see the timestamps, for instance.

       -f, --force
           Overwrite existing data file. (deprecated)

       -g, --call-graph
           Do call-graph (stack chain/backtrace) recording.


----------------------------------------------------------------
The output example is following:
# pgrep qemu-kvm
26071
32253

# perf kvm stat report

Then, track the guest whose pid is 26071:
# ./perf kvm stat record -p 26071

See the vmexit events:
# perf kvm stat report --event=vmexit

And, --vcpu is used to track the specified vcpu and --key is used to sort the
result:
# ./perf kvm stat report --event=vmexit --vcpu=0 --key=time

------------------------------------------------------------------
Repeated measurement 
#perf stat -r 5 sleep 1

可用的
perf stat -e 'kvm:*' -a sleep 1h

-----------------------------------------------------------------------
perf-record

-a, --all-cpus    System-wide collection from all CPUs
-p		  Record events on existing process ID
-C, --cpu 	  Collect samples only on the list of CPUs provided

-----------------------------------------------------------------------

Best practice:

root@intel_5500_server:~# pidof qemu-system-x86_64 
1649
root@intel_5500_server:~# perf stat -e 'kvm:*' -a -p 1649

or:

perf stat -e 'kvm:*' -a -p `pidof qemu-system-x86_64`
