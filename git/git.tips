http://hugogiraudel.com/2014/03/17/git-tips-and-tricks-part-2/
http://blog.adamspiers.org/2013/09/19/easier-upstreaming-with-git/
how to man 
lyang001@lyang0-9010:~/git/git_testA$ man git | grep pull | grep request
       git-request-pull(1)
lyang001@lyang0-9010:~/git/git_testA$ man git-request-pull

git://git.op5.org/git/git.git

https://github.com/git/git.git


$ git push ssh://git@dev.lemote.com/rt4ls.git master // 把本地仓库提交到远程仓库的master分支中
<<===>> 等价于下面的
$ git remote add origin ssh://git@dev.lemote.com/rt4ls.git
$ git push origin master 
需要说明的是，默认情况下这条语句等价于提交本地的master仓库到远程仓库，并作为远程的master分支




git diff tmp 
git merge tmp
git branch -d tmp

github
ssh-keygen -t rsa -C "yanglei.fage@gmail.com"
clip < ~/.ssh/id_rsa.pub

git init
do something
git add .
git commit -m "init the repos" 
git remote add origin git@github.com:leiyang/wr-autotest.git
git push origin master


git log --format='%H %s' --since="3 day"
git show master:features/ipmi/ipmi.scc


bare clone:
#git cat-file blob LB18_5.0:README 

no bare clone:
git show HEAD:README.TXT

??
git rev-parse --verify master:INSTALL 

git compare different branch file: 
git diff master:Documentation.ND/kernel-feature-matrix-5.0.txt origin/LB18_5.0:Documentation.ND/kernel-feature-matrix-5.0.txt

To get a comparison of branches in a "status" type format to see which file changes:
git diff --name-status master..origin/LB18_5.0


git tag
git tag -a 2.00 e3f5043233336d8b4b0731c6a8b42a8fda5535ac

git archive
git archive --format=tar.gz --prefix=mplayer-1.1  2.00 -o mplayer-1.1.tar.gz
http://www.kernel.org/pub/software/scm/git/docs/git-archive.html


git commit --amend
can change your git log title








To fix the commit which is not the most recent one 

If the commit you want to fix isn’t the most recent one:

    #git rebase --interactive $parent_of_flawed_commit

    If you want to fix several flawed commits, pass the parent of the oldest one of them.

    An editor will come up, with a list of all commits since the one you gave.
    #Change pick to reword (or on old versions of Git, to edit) in front of any commits you want to fix.
    #Once you save, git will replay the listed commits. 

======================================

    git pull --rebase

    git pull --rebase origin a-black-and-thick-branch


=============================================


git rev-parse --show-toplevel


git log --name-status --no-merges
git diff --name-only --since="10 weeks ago"

git log --name-status --oneline --no-merges --since="100 days ago"

But for seeing the files changed between your branch and its common with another branch (say origin/master):

git diff --name-only `git merge-base origin/master HEAD`

git diff --word-diff SHA1 SHA2

git diff --stat 5c98bcc f648f80

git log --no-merges --stat --oneline

git log --numstat --no-merges

git log --no-merges --stat --pretty="format:"  --since="2 week ago"

git log --no-merges --stat --pretty="format:"  --since="2 week ago" |grep -v file |sed '/^$/d'


git log v4.1.. --pretty=oneline --name-status |grep ^A


git log -n 10000 --pretty=oneline --name-status |grep ^A

git log v3.14..v4.1 --pretty=oneline --name-status |grep ^A > changelogs

