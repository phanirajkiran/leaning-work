Similarly, attempting to overwrite a branch via a move fails if data loss would ensue. To force a branch move, type:

$ git branch -M source target  # instead of -m

git branch -a 

lyang001@lyang0-9010:~/git/meta-virtualization$ git branch -M master test
lyang001@lyang0-9010:~/git/meta-virtualization$ git branch 
* test


You can use the git branch --contains <tag> command to show the branches that contain a particular feature. This command shows the branches that contain the systemtap feature:

$ git branch --contains systemtap
                    

# Creates a remote tracking branch
git branch --track <remote> <branch>


lyang0@ovp:/buildarea1/lyang0/60/build/linux-windriver/linux$ git rev-parse --abbrev-ref HEAD
standard/preempt-rt/intel-x86-64 

get current branch:
git rev-parse --abbrev-ref HEAD


new empty branch 
$ git checkout --orphan NEWBRANCH

--orphan creates a new branch, but it starts without any commit. After running the above command you are on a new branch "NEWBRANCH", and the first commit you create from this state will start a new history without any ancestry.

The --orphan command keeps the index and the working tree files intact in order to make it convenient for creating a new history whose trees resemble the ones from the original branch.

Since you want to create a new empty branch that has nothing to do with the original branch, you can delete all files in the new working directory:

$ git rm -rf .
$ touch readme
$ git add . 
$ git commit -m "empty branch"


in this way, "empty branch" is the first commit 



for branch in `git branch -r | grep -v HEAD`;do echo -e `git show --format="%ci" $branch | head -n 1` \\t$branch; done |sort -r |grep -v next | head -1 | awk '{print $NF}'
https://gist.github.com/jasonrudolph/1810768
