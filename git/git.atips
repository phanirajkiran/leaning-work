http://mislav.uniqpath.com/2010/07/git-tips/


Show branches, tags in git log
 #git log --oneline --decorate
-------------------------------------------------------------------------------------------
Diff by highlighting inline word changes instead of whole lines

lyang001@lyang0-9010:~/meta-networking$ git diff --word-diff
diff --git a/recipes-connectivity/vpnc/vpnc_0.5.3.bb b/recipes-connectivity/vpnc/vpnc_0.5.3.bb
index 1b2b8bf..fa91523 100644
--- a/recipes-connectivity/vpnc/vpnc_0.5.3.bb
+++ b/recipes-connectivity/vpnc/vpnc_0.5.3.bb
@@ -26,5 +26,6 @@ SRC_URI = "http://www.unix-ag.uni-kl.de/~massar/vpnc/vpnc-${PV}.tar.gz \
           file://long-help \
           file://default.conf"

SRC_URI[md5sum] = [-"4378f9551d5b077e1770bbe09995afb3"-]{+"4378f9551xffssd5b077e1770bbe09995afb3"+}
SRC_URI[sha256sum] = "46cea3bd02f207c62c7c6f2f22133382602baeda1dc320747809e94881414884"
{+add lei+}
-----------------------------------------------------------------------------------------

$ git push -u origin master

# pushes the "master" branch to "origin" remote and sets up tracking
However, git push will by default push all branches that have the same name on the remote. To limit this behavior to just the current branch, set this configuration option:

$ git config --global push.default tracking
----------------------------------------------------------------------------------------

lyang001@lyang0-9010:~/git/git_testA$ git checkout -t origin/myfeature
Branch myfeature set up to track remote branch myfeature from origin.
Switched to a new branch 'myfeature'

----------------------------------------------------------------------------------------
Find out if a change is part of a release

$ git name-rev --name-only 50f3754

"tags/v2.3.8~6"

The name-rev command can tell us the position of a commit relative to tags in the project. The example above is from the Ruby on Rails project. This tells us that this commit is located 6 commits before “v2.3.8” was tagged—we can be certain that this change is now part of Rails 2.3.8, 

lyang001@lyang0-9010:~/meta-networking$ echo e8240e91d474912b1191a2c22bf215ad8234bc6a | git name-rev --stdin
e8240e91d474912b1191a2c22bf215ad8234bc6a (remotes/origin/LB02A_5.0.1~6)

-------------------------------------------------------------------------------------------
Find out which branch contains a change

$ git branch --contains 50f3754
$ git tags --contains 50f3754

lyang001@lyang0-9010:~/meta-networking$ git branch -r --contains db3277935f4aadff0e99bbf537b75f2fe0290073
  origin/HEAD -> origin/upstream-master
  origin/LB06_5.0.1
  origin/LB07_5.0.1
  origin/LB08_5.0.1
  origin/LB09_5.0.1
  origin/LB10_5.0.1
  origin/LB11_5.0.1
  origin/LB12_5.0.1
  origin/LB14_5.0.1
  origin/LB15_5.0.1
  origin/LB16_5.0.1
  origin/LB17_5.0.1
  origin/LB18_5.0.1
  origin/LB19_5.0.1
  origin/LB20_5.0.1
  origin/upstream-master
  origin/wr-20121018
  origin/wr-20130104

git log --grep="Do not change worker"
------------------------------------------------------------------------------------------------------
read http://stackoverflow.com/questions/7566416/different-commits-between-two-branches
See which changes from a branch are already present upstream

# while on "feature" branch:
$ git cherry -v master
lyang001@lyang0-9010:~/kvm_32/layers/oe-core$ git cherry -v origin/upstream-master

The cherry command is useful to see which commits have been cherry-picked from a development branch to the stable branch, for instance. This command compares changes on the current (“feature”) branch to upstream (“master”) and indicates which are present on both with the “–” sign. Changes still missing from upstream are marked with “+”.



The little-used command git cherry shows you the changes which haven't yet been cherry-picked. The documentation for git cherry is here, but, in short, you should just be able to do:

git checkout devel
git cherry next

... and see output a bit like this:

+ 492508acab7b454eee8b805f8ba906056eede0ff
- 5ceb5a9077ddb9e78b1e8f24bfc70e674c627949
+ b4459544c000f4d51d1ec23f279d9cdb19c1d32b
+ b6ce3b78e938644a293b2dd2a15b2fecb1b54cd9

The commits that being with + will be the ones that you haven't yet cherry-picked into next. In this case, I'd only cherry-picked one commit so far. You might want to add the -v parameter to the git cherry command, so that it also outputs the subject line of each commit.

Every commit that doesn’t exist in the <upstream> branch has its id (sha1) reported, prefixed by a symbol. The ones that have equivalent change already in the <upstream> branch are prefixed with a minus (-) sign, and those that only exist in the <head> branch are prefixed with a plus (+) symbol:

           __*__*__*__*__> <upstream>
          /
fork-point
          \__+__+__-__+__+__-__+__> <head>


------------------------------------------------------------------------
$ git pull-request | pbcopy
http://mislav.uniqpath.com/2010/07/git-tips/


→ (URL ready for pasting in a chat room)
--------------------------------------------------------------------------------

http://net.tutsplus.com/tutorials/tools-and-tips/git-tips-from-the-pros/

Grab a File from Another Branch without Switching Branches

git checkout <BRANCH> -- path/to/file.rb


git rev-list --all | xargs git grep -F '<YOUR STRING>'

1)
lyang001@lyang001-OptiPlex-9010:~/trees/kernel-3.4.x-pro$ git rev-parse ":/x86/mce: Do not change worker"
74f30e03d9f16fa9ddb51681fe65ae1832ba4228
lyang001@lyang001-OptiPlex-9010:~/trees/kernel-3.4.x-pro$ git branch -a --contains 74f30e03d9f16fa9ddb51681fe65ae1832ba4228
  remotes/origin/standard/preempt-rt/intel-xeon-core

--------------------------------------------------------------------------
list when it' first introduced:

lyang001@lyang001-OptiPlex-9010:~/test-trees/linux-stable$ git name-rev --name-only 62ade86ab6c7e26409229ca45503cae97bf698cf
tags/v3.4~5
lyang001@lyang001-OptiPlex-9010:~/test-trees/linux-stable$ git tag --contains 62ade86ab6c7e26409229ca45503cae97bf698cf
v3.4
v3.4.1
v3.4.10
v3.4.11
v3.4.12
v3.4.13
v3.4.14
v3.4.15
v3.4.16
v3.4.17

lyang001@lyang001-OptiPlex-9010:~/test-trees/linux-stable$ git name-rev --name-only ":/rcu: Make RCU_FAST_NO_HZ use"
tags/v3.5-rc1~164^2^2~7

