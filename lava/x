{
    "test_runs": [
        {
            "software_context": {
                "sources": [
                    {
                        "project_name": "lava-ovp-test-definitions", 
                        "test_params": "{u'BASEURL': u'http://yow-lpd-lava1.wrs.com:8080/common/latest/ovp_kvm_testing-WRLINUX_8_0_HEAD/corei7_64/'}", 
                        "branch_url": "git://ala-git/lava-ovp-test-definitions", 
                        "branch_vcs": "git", 
                        "default_params": "{'BASEURL': 'http://yow-lpd-lava1.wrs.com:8080/common/latest/ovp_kvm-WRLINUX_8_0_HEAD/RPMS'}", 
                        "branch_revision": "001a356a68146742e14c320c634533a7d61072df"
                    }
                ], 
                "image": {
                    "name": "Wind River Linux 8.0.0.0 \n"
                }, 
                "packages": []
            }, 
            "attachments": [
                {
                    "content": "PExBVkFfU0lHTkFMX1NUQVJUUlVOIHNtYXJ0LWFkZC1sYXZhLWNoYW5uZWwgNGY0MmI5M2EtOWNhNy00MjJlLThjNzctNGM4NzlhZmI1ZmFjPgo8TEFWQV9TSUdOQUxfU1RBUlRUQyBzbWFydF9zZXR1cF9sYXZhX2ZlZWQ+CkFkZGluZyB0aGUgbGF2YSBzZXJ2ZXIgcGFja2FnZSBmZWVkIGNoYW5uZWwgdG8gc21hcnQ6IGFkZF9sYXZhX2NoYW5uZWxfc2g6IHBhc3MKPExBVkFfU0lHTkFMX0VORFRDIHNtYXJ0X3NldHVwX2xhdmFfZmVlZD4KPExBVkFfU0lHTkFMX1RFU1RDQVNFIFRFU1RfQ0FTRV9JRD1zbWFydF9zZXR1cF9sYXZhX2ZlZWQgUkVTVUxUPXBhc3M+CjxMQVZBX1NJR05BTF9FTkRSVU4gc21hcnQtYWRkLWxhdmEtY2hhbm5lbCA0ZjQyYjkzYS05Y2E3LTQyMmUtOGM3Ny00Yzg3OWFmYjVmYWM+Cg==", 
                    "pathname": "stdout.log", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "bWV0YWRhdGE6CiAgZGVzY3JpcHRpb246IENvbmZpZ3VyZXMgdGhlIERVVCBzbWFydCBpbnN0YW5jZSB0byBiZSBhd2FyZSBvZiB0aGUgbGF2YSBwYWNrYWdlIHJlcG8uCiAgZm9ybWF0OiBMYXZhLVRlc3QgVGVzdCBEZWZpbml0aW9uIDEuMAogIG1haW50YWluZXI6IFttYXJrLmFzc2Vsc3RpbmVAd2luZHJpdmVyLmNvbV0KICBuYW1lOiBzbWFydC1hZGQtbGF2YS1jaGFubmVsCiAgb3M6IFt3cmxdCiAgc2NvcGU6IFtmdW5jdGlvbmFsXQpwYXJhbXM6IHtCQVNFVVJMOiAnaHR0cDovL3lvdy1scGQtbGF2YTEud3JzLmNvbTo4MDgwL2NvbW1vbi9sYXRlc3Qvb3ZwX2t2bS1XUkxJTlVYXzhfMF9IRUFEL1JQTVMnfQpwYXJzZToge3BhdHRlcm46ICcoP1A8dGVzdF9jYXNlX2lkPlsgL2EtekEtWjAtOV0rKTogKD9QPHJlc3VsdD5bQS1aXSspJ30KcnVuOgogIHN0ZXBzOiBbbGF2YS10ZXN0LWNhc2Ugc21hcnRfc2V0dXBfbGF2YV9mZWVkIC0tc2hlbGwgLi9vdnAvc21hcnQvYWRkX2xhdmFfY2hhbm5lbC5zaAogICAgICAkQkFTRVVSTF0K", 
                    "pathname": "testdef.yaml", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "MAo=", 
                    "pathname": "return_code", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "IyMjZGVmYXVsdCBwYXJhbWV0ZXJzIGZyb20geWFtbCMjIwpCQVNFVVJMPSdodHRwOi8veW93LWxwZC1sYXZhMS53cnMuY29tOjgwODAvY29tbW9uL2xhdGVzdC9vdnBfa3ZtLVdSTElOVVhfOF8wX0hFQUQvUlBNUycKIyMjIyMjCiMjI3Rlc3QgcGFyYW1ldGVycyBmcm9tIGpzb24jIyMKQkFTRVVSTD0naHR0cDovL3lvdy1scGQtbGF2YTEud3JzLmNvbTo4MDgwL2NvbW1vbi9sYXRlc3Qvb3ZwX2t2bV90ZXN0aW5nLVdSTElOVVhfOF8wX0hFQUQvY29yZWk3XzY0LycKIyMjIyMjCnNldCAtZQpleHBvcnQgVEVTVFJVTl9JRD1zbWFydC1hZGQtbGF2YS1jaGFubmVsCmNkIC9sYXZhLWludGVsLWZsYXRoZWFkLWNyZWVrLTEvdGVzdHMvMV9zbWFydC1hZGQtbGF2YS1jaGFubmVsClVVSUQ9YGNhdCB1dWlkYAplY2hvICI8TEFWQV9TSUdOQUxfU1RBUlRSVU4gJFRFU1RSVU5fSUQgJFVVSUQ+Igojd2FpdCBmb3IgYW4gYWNrIGZyb20gdGhlIGRpc3BhdGNoZXIKcmVhZApsYXZhLXRlc3QtY2FzZSBzbWFydF9zZXR1cF9sYXZhX2ZlZWQgLS1zaGVsbCAuL292cC9zbWFydC9hZGRfbGF2YV9jaGFubmVsLnNoICRCQVNFVVJMCmVjaG8gIjxMQVZBX1NJR05BTF9FTkRSVU4gJFRFU1RSVU5fSUQgJFVVSUQ+Igojd2FpdCBmb3IgYW4gYWNrIGZyb20gdGhlIGRpc3BhdGNoZXIKcmVhZAo=", 
                    "pathname": "run.sh", 
                    "mime_type": "text/plain"
                }
            ], 
            "test_id": "smart-add-lava-channel", 
            "analyzer_assigned_date": "2016-05-08T00:17:47Z", 
            "test_results": [
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 5, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "smart_setup_lava_feed"
                }
            ], 
            "testdef_metadata": {
                "description": "Configures the DUT smart instance to be aware of the lava package repo.", 
                "format": "Lava-Test Test Definition 1.0", 
                "url": "git://ala-git/lava-ovp-test-definitions", 
                "devices": "", 
                "environment": "", 
                "version": "001a356a68146742e14c320c634533a7d61072df", 
                "location": "GIT", 
                "os": "wrl"
            }, 
            "hardware_context": {
                "devices": [
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #0", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #1", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #2", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #3", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "revision": "?"
                        }, 
                        "description": "GenuineIntel", 
                        "device_type": "device.board"
                    }, 
                    {
                        "description": "8107624 kB of RAM", 
                        "device_type": "device.mem"
                    }
                ]
            }, 
            "analyzer_assigned_uuid": "4f42b93a-9ca7-422e-8c77-4c879afb5fac", 
            "attributes": {
                "kernel-boot-time": "207.26", 
                "target_group": "c7dd33d2-3e73-414a-b19e-3879fd58bffe", 
                "target": "intel-flathead-creek-1", 
                "target.hostname": "intel-flathead-creek-1", 
                "target.device_version": "error", 
                "collection": "weekend-benchmarking", 
                "role": "hostA", 
                "build": "8160507", 
                "target.device_type": "vlm-pxe-master", 
                "group_size": "2"
            }, 
            "time_check_performed": false
        }, 
        {
            "software_context": {
                "sources": [
                    {
                        "project_name": "lava-ovp-test-definitions", 
                        "test_params": "", 
                        "branch_url": "git://ala-git/lava-ovp-test-definitions", 
                        "branch_vcs": "git", 
                        "default_params": "{'OVP_DEBUG': ''}", 
                        "branch_revision": "001a356a68146742e14c320c634533a7d61072df"
                    }
                ], 
                "image": {
                    "name": "Wind River Linux 8.0.0.0 \n"
                }, 
                "packages": []
            }, 
            "attachments": [
                {
                    "content": "PExBVkFfU0lHTkFMX1NUQVJUUlVOIG5ldC1zYW5pdHkgMWVhZWE2OWEtOGMxOS00ZmQ2LWEzMzUtNmQ5ODY3NmEzMDYyPgo8TEFWQV9TSUdOQUxfU1RBUlRUQyBuZXR3b3JrX3Nhbml0eV9ob3N0Pgo8TEFWQV9TSUdOQUxfVEVTVENBU0UgVEVTVF9DQVNFX0lEPW5ldHdvcmtfc2FuZSBSRVNVTFQ9cGFzcz4KZ3JlcDogL2V0Yy9yZXNvbHYuY29uZjogTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeQo8TEFWQV9TSUdOQUxfVEVTVENBU0UgVEVTVF9DQVNFX0lEPXJlc29sdl9jb25mX3NhbmUgUkVTVUxUPWZhaWw+Cndhcm5pbmc6IHJlc29sdi5jb25mIGRvZXMgbm90IGNvbnRhaW4gZXhwZWN0ZWQgc3RyaW5ncwpjYXQ6IC9ldGMvcmVzb2x2LmNvbmY6IE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkKb3ZwL25ldC9uZXRfc2FuaXR5LnNoOiBsaW5lIDQzOiBuc2xvb2t1cDogY29tbWFuZCBub3QgZm91bmQKd2FybmluZzogdHJ5aW5nIHRvIHdvcmthcm91bmQgbGFjayBvZiBuYW1lIHJlc29sdXRpb24KPExBVkFfU0lHTkFMX1RFU1RDQVNFIFRFU1RfQ0FTRV9JRD1uYW1lX3Jlc29sdXRpb25fc2FuaXR5IFJFU1VMVD1mYWlsPgpvdnAvbmV0L25ldF9zYW5pdHkuc2g6IGxpbmUgNDM6IG5zbG9va3VwOiBjb21tYW5kIG5vdCBmb3VuZAo8TEFWQV9TSUdOQUxfVEVTVENBU0UgVEVTVF9DQVNFX0lEPW5hbWVfcmVzb2x1dGlvbiBSRVNVTFQ9ZmFpbD4KPExBVkFfU0lHTkFMX0VORFRDIG5ldHdvcmtfc2FuaXR5X2hvc3Q+CjxMQVZBX1NJR05BTF9URVNUQ0FTRSBURVNUX0NBU0VfSUQ9bmV0d29ya19zYW5pdHlfaG9zdCBSRVNVTFQ9ZmFpbD4KPExBVkFfU0lHTkFMX0VORFJVTiBuZXQtc2FuaXR5IDFlYWVhNjlhLThjMTktNGZkNi1hMzM1LTZkOTg2NzZhMzA2Mj4K", 
                    "pathname": "stdout.log", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "bWV0YWRhdGE6CiAgZGVzY3JpcHRpb246IEFkZCB0aGUgTEFWQSBzZXJ2ZXIgSVAgYWRkcmVzcyB0byB0aGUgRFVUJ3MgaG9zdHMgZmlsZSBhbmQgY29uZmlndXJlCiAgICB0aGUgcmVzb2x2LmNvbmYuCiAgZGV2aWNlczogW3ZsbS1weGUtbWFzdGVyXQogIGZvcm1hdDogTGF2YS1UZXN0IFRlc3QgRGVmaW5pdGlvbiAxLjAKICBtYWludGFpbmVyOiBbbWljaGVsLnRoZWJlYXVAd2luZHJpdmVyLmNvbV0KICBuYW1lOiBuZXQtc2FuaXR5CiAgb3M6IFt3cmxdCiAgc2NvcGU6IFtmdW5jdGlvbmFsXQpwYXJhbXM6IHtPVlBfREVCVUc6ICcnfQpwYXJzZToge3BhdHRlcm46ICcoP1A8dGVzdF9jYXNlX2lkPlsgL2EtekEtWjAtOV0rKTogKD9QPHJlc3VsdD5bQS1aXSspJ30KcnVuOgogIHN0ZXBzOiBbZXhwb3J0IE9WUF9ERUJVRywgbGF2YS10ZXN0LWNhc2UgbmV0d29ya19zYW5pdHlfaG9zdCAtLXNoZWxsIG92cC9uZXQvbmV0X3Nhbml0eS5zaF0K", 
                    "pathname": "testdef.yaml", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "MAo=", 
                    "pathname": "return_code", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "IyMjZGVmYXVsdCBwYXJhbWV0ZXJzIGZyb20geWFtbCMjIwpPVlBfREVCVUc9JycKIyMjIyMjCiMjI3Rlc3QgcGFyYW1ldGVycyBmcm9tIGpzb24jIyMKIyMjIyMjCnNldCAtZQpleHBvcnQgVEVTVFJVTl9JRD1uZXQtc2FuaXR5CmNkIC9sYXZhLWludGVsLWZsYXRoZWFkLWNyZWVrLTEvdGVzdHMvMF9uZXQtc2FuaXR5ClVVSUQ9YGNhdCB1dWlkYAplY2hvICI8TEFWQV9TSUdOQUxfU1RBUlRSVU4gJFRFU1RSVU5fSUQgJFVVSUQ+Igojd2FpdCBmb3IgYW4gYWNrIGZyb20gdGhlIGRpc3BhdGNoZXIKcmVhZApleHBvcnQgT1ZQX0RFQlVHCmxhdmEtdGVzdC1jYXNlIG5ldHdvcmtfc2FuaXR5X2hvc3QgLS1zaGVsbCBvdnAvbmV0L25ldF9zYW5pdHkuc2gKZWNobyAiPExBVkFfU0lHTkFMX0VORFJVTiAkVEVTVFJVTl9JRCAkVVVJRD4iCiN3YWl0IGZvciBhbiBhY2sgZnJvbSB0aGUgZGlzcGF0Y2hlcgpyZWFkCg==", 
                    "pathname": "run.sh", 
                    "mime_type": "text/plain"
                }
            ], 
            "test_id": "net-sanity", 
            "analyzer_assigned_date": "2016-05-08T00:17:47Z", 
            "test_results": [
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 3, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "network_sane"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 5, 
                    "result": "fail", 
                    "attributes": {}, 
                    "test_case_id": "resolv_conf_sane"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 10, 
                    "result": "fail", 
                    "attributes": {}, 
                    "test_case_id": "name_resolution_sanity"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 12, 
                    "result": "fail", 
                    "attributes": {}, 
                    "test_case_id": "name_resolution"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 14, 
                    "result": "fail", 
                    "attributes": {}, 
                    "test_case_id": "network_sanity_host"
                }
            ], 
            "testdef_metadata": {
                "description": "Add the LAVA server IP address to the DUT's hosts file and configure the resolv.conf.", 
                "format": "Lava-Test Test Definition 1.0", 
                "url": "git://ala-git/lava-ovp-test-definitions", 
                "devices": "vlm-pxe-master", 
                "environment": "", 
                "version": "001a356a68146742e14c320c634533a7d61072df", 
                "location": "GIT", 
                "os": "wrl"
            }, 
            "hardware_context": {
                "devices": [
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #0", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #1", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #2", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #3", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "revision": "?"
                        }, 
                        "description": "GenuineIntel", 
                        "device_type": "device.board"
                    }, 
                    {
                        "description": "8107624 kB of RAM", 
                        "device_type": "device.mem"
                    }
                ]
            }, 
            "analyzer_assigned_uuid": "1eaea69a-8c19-4fd6-a335-6d98676a3062", 
            "attributes": {
                "kernel-boot-time": "207.26", 
                "target_group": "c7dd33d2-3e73-414a-b19e-3879fd58bffe", 
                "target": "intel-flathead-creek-1", 
                "target.hostname": "intel-flathead-creek-1", 
                "target.device_version": "error", 
                "collection": "weekend-benchmarking", 
                "role": "hostA", 
                "build": "8160507", 
                "target.device_type": "vlm-pxe-master", 
                "group_size": "2"
            }, 
            "time_check_performed": false
        }, 
        {
            "software_context": {
                "sources": [
                    {
                        "project_name": "lava-ovp-test-definitions", 
                        "test_params": "{u'BRIDGE_PUBLIC': u'br-ovp', u'GUEST_IMAGES_DIR': u'/guest-images', u'GUEST_KERNEL': u'x86-64-kvm-guest-bzImage-WR8.0.0.0_ovp', u'GUEST_ROOTFS': u'x86-64-kvm-guest-wrlinux-image-ovp-guest-ovp-dist.ext3'}", 
                        "branch_url": "git://ala-git/lava-ovp-test-definitions", 
                        "branch_vcs": "git", 
                        "default_params": "{'BRIDGE_PUBLIC': 'None', 'ETH_PUBLIC': 'None', 'GUEST_IMAGES_DIR': 'None', 'GUEST_KERNEL': 'None', 'GUEST_ROOTFS': 'None', 'TIMES': 50}", 
                        "branch_revision": "001a356a68146742e14c320c634533a7d61072df"
                    }
                ], 
                "image": {
                    "name": "Wind River Linux 8.0.0.0 \n"
                }, 
                "packages": []
            }, 
            "attachments": [
                {
                    "content": "", 
                    "pathname": "stdout.log", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "bWV0YWRhdGE6IHtkZXNjcmlwdGlvbjogJ1ByZXBhcmUgaG9zdCBBIGZvciBtZWFzdXJpbmcgbmV0IGRvd250aW1lIGludGVyIGxpdmUgbWlncmF0aW9uLiAgVGhlCiAgICBqb2IgcHJlcGFyZSBndWVzdCBpbWFnZSBhbmQgcm9vdGZzLCB0aGVuIGludm9rZSBtaWdyYXRlX3FlbXVfYmVuY2htYXJrLnNoIHNjcmlwdAogICAgd2hpY2ggc3Bhd25zIGd1ZXN0IHFlbXUgc2Vzc2lvbnMsIHN0YXJ0IG5ldCBkb3dudGltZSBtZWFzdXJpbmcgdXRpbCwgdHJpZ2dlciBtaWdyYXRpb24sCiAgICBhbmQgZG9lcyByZXBvcnQnLCBmb3JtYXQ6IExhdmEtVGVzdCBUZXN0IERlZmluaXRpb24gMS4wLCBuYW1lOiBpbnRlci1ub2RlLW1pZ3JhdGUtYmVuY2htYXJrLW9uLWhvc3QtQX0KcGFyYW1zOiB7QlJJREdFX1BVQkxJQzogTm9uZSwgRVRIX1BVQkxJQzogTm9uZSwgR1VFU1RfSU1BR0VTX0RJUjogTm9uZSwgR1VFU1RfS0VSTkVMOiBOb25lLAogIEdVRVNUX1JPT1RGUzogTm9uZSwgVElNRVM6IDUwfQpydW46CiAgc3RlcHM6IFtsYXZhLXRlc3QtY2FzZSBzbWFydF9pbnN0YWxsX2V4cGVjdCAtLXNoZWxsIC4vb3ZwL3NtYXJ0L3NtYXJ0X2luc3RhbGwuc2gKICAgICAgZXhwZWN0LCBsYXZhLXRlc3QtY2FzZSBzbWFydF9pbnN0YWxsX21pZ3JhdGUtYmVuY2htYXJrIC0tc2hlbGwgLi9vdnAvc21hcnQvc21hcnRfaW5zdGFsbC5zaAogICAgICBtaWdyYXRlLWJlbmNobWFyaywgbGF2YS10ZXN0LWNhc2Ugc21hcnRfaW5zdGFsbF9vdnAtdXRpbGl0aWVzIC0tc2hlbGwgLi9vdnAvc21hcnQvc21hcnRfaW5zdGFsbC5zaAogICAgICBvdnAtdXRpbGl0aWVzLCAnbGF2YS10ZXN0LWNhc2UgY29weV90b19ndWVzdF9kb3dudGltZV91dGlscyAtLXNoZWxsIC4vb3ZwL2d1ZXN0L2NvcHlfdG9fZ3Vlc3RfaW1hZ2Uuc2gKICAgICAgJHtHVUVTVF9JTUFHRVNfRElSfS8ke0dVRVNUX1JPT1RGU30gL3Vzci9iaW4vbWlncmF0ZV9uZXRfZG93bnRpbWUucHkgL3Vzci9iaW4vJywKICAgICdsYXZhLXRlc3QtY2FzZSBjb3B5X3RvX2d1ZXN0X2xvYWRfdXRpbHMgLS1zaGVsbCAuL292cC9ndWVzdC9jb3B5X3RvX2d1ZXN0X2ltYWdlLnNoCiAgICAgICR7R1VFU1RfSU1BR0VTX0RJUn0vJHtHVUVTVF9ST09URlN9IG92cC9iZW5jaG1hcmsvaW50cmFfbGl2ZV9taWdyYXRpb24vbG9hZF9zeXN0ZW0uc2gKICAgICAgL3Jvb3QvJywgJ0hPU1RfQV9IT1NUTkFNRT0kKGxhdmEtZ3JvdXAgaG9zdEEgfCBhd2sgJyd7cHJpbnQgJDF9JycpJywgJ0hPU1RfQV9JUF9NQUlOPSQoY2F0CiAgICAgIC9ldGMvaG9zdHMgfCBncmVwICIke0hPU1RfQV9IT1NUTkFNRX0iIHwgY3V0IC1kIiAiIC1mMSknLCAnSE9TVF9CX0hPU1ROQU1FPSQobGF2YS1ncm91cAogICAgICBob3N0QiB8IGF3ayAnJ3twcmludCAkMX0nJyknLCAnSE9TVF9CX0lQX01BSU49JChjYXQgL2V0Yy9ob3N0cyB8IGdyZXAgIiR7SE9TVF9CX0hPU1ROQU1FfSIKICAgICAgfCBjdXQgLWQiICIgLWYxKScsICdsYXZhLXRlc3QtY2FzZSBydW5fbGl2ZV9taWdyYXRpb25fYmVuY2htYXJrIC0tc2hlbGwgLi9vdnAvYmVuY2htYXJrL2ludGVyX2xpdmVfbWlncmF0aW9uL21pZ3JhdGVfcWVtdV9iZW5jaG1hcmsuc2gKICAgICAgIiR7SE9TVF9BX0lQX01BSU59IiAiJHtIT1NUX0JfSVBfTUFJTn0iICIke0dVRVNUX0lNQUdFU19ESVJ9IiAiJHtHVUVTVF9LRVJORUx9IgogICAgICAiJHtHVUVTVF9ST09URlN9IiAiJHtCUklER0VfUFVCTElDfSIgIiR7VElNRVN9IiAiJHtFVEhfUFVCTElDfSInLCBsYXZhLXNlbmQKICAgICAgbGl2ZV9taWdyYXRpb25fbjJuX2ZpbmlzaGVkXQo=", 
                    "pathname": "testdef.yaml", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "MAo=", 
                    "pathname": "return_code", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "IyMjZGVmYXVsdCBwYXJhbWV0ZXJzIGZyb20geWFtbCMjIwpCUklER0VfUFVCTElDPSdOb25lJwpFVEhfUFVCTElDPSdOb25lJwpHVUVTVF9JTUFHRVNfRElSPSdOb25lJwpHVUVTVF9LRVJORUw9J05vbmUnCkdVRVNUX1JPT1RGUz0nTm9uZScKVElNRVM9JzUwJwojIyMjIyMKIyMjdGVzdCBwYXJhbWV0ZXJzIGZyb20ganNvbiMjIwpCUklER0VfUFVCTElDPSdici1vdnAnCkdVRVNUX0lNQUdFU19ESVI9Jy9ndWVzdC1pbWFnZXMnCkdVRVNUX0tFUk5FTD0neDg2LTY0LWt2bS1ndWVzdC1iekltYWdlLVdSOC4wLjAuMF9vdnAnCkdVRVNUX1JPT1RGUz0neDg2LTY0LWt2bS1ndWVzdC13cmxpbnV4LWltYWdlLW92cC1ndWVzdC1vdnAtZGlzdC5leHQzJwojIyMjIyMKc2V0IC1lCmV4cG9ydCBURVNUUlVOX0lEPWludGVyLW5vZGUtbWlncmF0ZS1iZW5jaG1hcmstb24taG9zdC1BCmNkIC9sYXZhLWludGVsLWZsYXRoZWFkLWNyZWVrLTEvdGVzdHMvNV9pbnRlci1ub2RlLW1pZ3JhdGUtYmVuY2htYXJrLW9uLWhvc3QtQQpVVUlEPWBjYXQgdXVpZGAKZWNobyAiPExBVkFfU0lHTkFMX1NUQVJUUlVOICRURVNUUlVOX0lEICRVVUlEPiIKI3dhaXQgZm9yIGFuIGFjayBmcm9tIHRoZSBkaXNwYXRjaGVyCnJlYWQKbGF2YS10ZXN0LWNhc2Ugc21hcnRfaW5zdGFsbF9leHBlY3QgLS1zaGVsbCAuL292cC9zbWFydC9zbWFydF9pbnN0YWxsLnNoIGV4cGVjdApsYXZhLXRlc3QtY2FzZSBzbWFydF9pbnN0YWxsX21pZ3JhdGUtYmVuY2htYXJrIC0tc2hlbGwgLi9vdnAvc21hcnQvc21hcnRfaW5zdGFsbC5zaCBtaWdyYXRlLWJlbmNobWFyawpsYXZhLXRlc3QtY2FzZSBzbWFydF9pbnN0YWxsX292cC11dGlsaXRpZXMgLS1zaGVsbCAuL292cC9zbWFydC9zbWFydF9pbnN0YWxsLnNoIG92cC11dGlsaXRpZXMKbGF2YS10ZXN0LWNhc2UgY29weV90b19ndWVzdF9kb3dudGltZV91dGlscyAtLXNoZWxsIC4vb3ZwL2d1ZXN0L2NvcHlfdG9fZ3Vlc3RfaW1hZ2Uuc2ggJHtHVUVTVF9JTUFHRVNfRElSfS8ke0dVRVNUX1JPT1RGU30gL3Vzci9iaW4vbWlncmF0ZV9uZXRfZG93bnRpbWUucHkgL3Vzci9iaW4vCmxhdmEtdGVzdC1jYXNlIGNvcHlfdG9fZ3Vlc3RfbG9hZF91dGlscyAtLXNoZWxsIC4vb3ZwL2d1ZXN0L2NvcHlfdG9fZ3Vlc3RfaW1hZ2Uuc2ggJHtHVUVTVF9JTUFHRVNfRElSfS8ke0dVRVNUX1JPT1RGU30gb3ZwL2JlbmNobWFyay9pbnRyYV9saXZlX21pZ3JhdGlvbi9sb2FkX3N5c3RlbS5zaCAvcm9vdC8KSE9TVF9BX0hPU1ROQU1FPSQobGF2YS1ncm91cCBob3N0QSB8IGF3ayAne3ByaW50ICQxfScpCkhPU1RfQV9JUF9NQUlOPSQoY2F0IC9ldGMvaG9zdHMgfCBncmVwICIke0hPU1RfQV9IT1NUTkFNRX0iIHwgY3V0IC1kIiAiIC1mMSkKSE9TVF9CX0hPU1ROQU1FPSQobGF2YS1ncm91cCBob3N0QiB8IGF3ayAne3ByaW50ICQxfScpCkhPU1RfQl9JUF9NQUlOPSQoY2F0IC9ldGMvaG9zdHMgfCBncmVwICIke0hPU1RfQl9IT1NUTkFNRX0iIHwgY3V0IC1kIiAiIC1mMSkKbGF2YS10ZXN0LWNhc2UgcnVuX2xpdmVfbWlncmF0aW9uX2JlbmNobWFyayAtLXNoZWxsIC4vb3ZwL2JlbmNobWFyay9pbnRlcl9saXZlX21pZ3JhdGlvbi9taWdyYXRlX3FlbXVfYmVuY2htYXJrLnNoICIke0hPU1RfQV9JUF9NQUlOfSIgIiR7SE9TVF9CX0lQX01BSU59IiAiJHtHVUVTVF9JTUFHRVNfRElSfSIgIiR7R1VFU1RfS0VSTkVMfSIgIiR7R1VFU1RfUk9PVEZTfSIgIiR7QlJJREdFX1BVQkxJQ30iICIke1RJTUVTfSIgIiR7RVRIX1BVQkxJQ30iCmxhdmEtc2VuZCBsaXZlX21pZ3JhdGlvbl9uMm5fZmluaXNoZWQKZWNobyAiPExBVkFfU0lHTkFMX0VORFJVTiAkVEVTVFJVTl9JRCAkVVVJRD4iCiN3YWl0IGZvciBhbiBhY2sgZnJvbSB0aGUgZGlzcGF0Y2hlcgpyZWFkCg==", 
                    "pathname": "run.sh", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "SG9zdCBBIChtYWluIHRocmVhZCBjb3JlIzsgdmNwdSBpbmZvKSB8IEhvc3QgQiAobWFpbiB0aHJlYWQgY29yZSM7IHZjcHUgaW5mbykgfCBsb2FkIHwgbWluKG1zKSB8IGF2ZyhtcykgfCBtYXgobXMpCmZsb2F0OyB2Y3B1IGZsb2F0IHwgZmxvYXQ7IHZjcHUgZmxvYXQgfCBubyB8IDAuNDU4IHwgMS4xMDgyNCB8IDcuMTIyCmZsb2F0OyB2Y3B1IGZsb2F0IHwgZmxvYXQ7IHZjcHUgZmxvYXQgfCB5ZXMgfCAxLjIxMyB8IDIuNTQyMjIgfCA1LjQwMApmbG9hdDsgLXNtcCAyIHwgZmxvYXQ7IC1zbXAgMiB8IG5vIHwgMC4zODIgfCAwLjczMzY0IHwgMi4zNTgKZmxvYXQ7IC1zbXAgMiB8IGZsb2F0OyAtc21wIDIgfCB5ZXMgfCAyLjc4OSB8IDMuOTgxODYgfCA2LjE2MAozOyB2Y3B1IGZsb2F0IHwgMjM7IHZjcHUgZmxvYXQgfCBubyB8IDAuMzk4IHwgMS4xNjI1MiB8IDUuNjY1CjM7IHZjcHUgZmxvYXQgfCAyMzsgdmNwdSBmbG9hdCB8IHllcyB8IDEuMjQwIHwgMi42MTEzOCB8IDIuODYxCg==", 
                    "pathname": "guest-images/migration_report.xls", 
                    "mime_type": "application/vnd.ms-excel"
                }
            ], 
            "test_id": "inter-node-migrate-benchmark-on-host-A", 
            "analyzer_assigned_date": "2016-05-08T00:17:47Z", 
            "test_results": [
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 24, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "smart_install_expect"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 47, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "smart_install_migrate-benchmark"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 70, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "smart_install_ovp-utilities"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 74, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "copy_to_guest_downtime_utils"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 78, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "copy_to_guest_load_utils"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 1785, 
                    "result": "pass", 
                    "measurement": 0.458, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "float_vcpu_float_float_vcpu_float_load_no_[Min]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 1786, 
                    "result": "pass", 
                    "measurement": 1.10824, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "float_vcpu_float_float_vcpu_float_load_no_[Avg]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 1787, 
                    "result": "pass", 
                    "measurement": 7.122, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "float_vcpu_float_float_vcpu_float_load_no_[Max]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 3375, 
                    "result": "pass", 
                    "measurement": 1.213, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "float_vcpu_float_float_vcpu_float_load_yes_[Min]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 3376, 
                    "result": "pass", 
                    "measurement": 2.54222, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "float_vcpu_float_float_vcpu_float_load_yes_[Avg]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 3377, 
                    "result": "pass", 
                    "measurement": 5.4, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "float_vcpu_float_float_vcpu_float_load_yes_[Max]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 5108, 
                    "result": "pass", 
                    "measurement": 0.382, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "float_smp_2_float_smp_2_load_no_[Min]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 5109, 
                    "result": "pass", 
                    "measurement": 0.73364, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "float_smp_2_float_smp_2_load_no_[Avg]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 5110, 
                    "result": "pass", 
                    "measurement": 2.358, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "float_smp_2_float_smp_2_load_no_[Max]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 6789, 
                    "result": "pass", 
                    "measurement": 2.789, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "float_smp_2_float_smp_2_load_yes_[Min]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 6790, 
                    "result": "pass", 
                    "measurement": 3.98186, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "float_smp_2_float_smp_2_load_yes_[Avg]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 6791, 
                    "result": "pass", 
                    "measurement": 6.16, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "float_smp_2_float_smp_2_load_yes_[Max]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 8505, 
                    "result": "pass", 
                    "measurement": 0.398, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "3_vcpu_float_23_vcpu_float_load_no_[Min]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 8506, 
                    "result": "pass", 
                    "measurement": 1.16252, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "3_vcpu_float_23_vcpu_float_load_no_[Avg]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 8507, 
                    "result": "pass", 
                    "measurement": 5.665, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "3_vcpu_float_23_vcpu_float_load_no_[Max]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 10260, 
                    "result": "pass", 
                    "measurement": 1.24, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "3_vcpu_float_23_vcpu_float_load_yes_[Min]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 10261, 
                    "result": "pass", 
                    "measurement": 2.61138, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "3_vcpu_float_23_vcpu_float_load_yes_[Avg]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 10262, 
                    "result": "pass", 
                    "measurement": 2.861, 
                    "units": "ms", 
                    "attributes": {}, 
                    "test_case_id": "3_vcpu_float_23_vcpu_float_load_yes_[Max]"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 10271, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "run_live_migration_benchmark"
                }
            ], 
            "testdef_metadata": {
                "description": "Prepare host A for measuring net downtime inter live migration.  The job prepare guest image and rootfs, then invoke migrate_qemu_benchmark.sh script which spawns guest qemu sessions, start net downtime measuring util, trigger migration, and does report", 
                "format": "Lava-Test Test Definition 1.0", 
                "url": "git://ala-git/lava-ovp-test-definitions", 
                "devices": "", 
                "environment": "", 
                "version": "001a356a68146742e14c320c634533a7d61072df", 
                "location": "GIT", 
                "os": ""
            }, 
            "hardware_context": {
                "devices": [
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #0", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #1", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #2", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #3", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "revision": "?"
                        }, 
                        "description": "GenuineIntel", 
                        "device_type": "device.board"
                    }, 
                    {
                        "description": "8107624 kB of RAM", 
                        "device_type": "device.mem"
                    }
                ]
            }, 
            "analyzer_assigned_uuid": "a1abc924-bbda-4c53-a84f-52970dc64ab1", 
            "attributes": {
                "kernel-boot-time": "207.26", 
                "target_group": "c7dd33d2-3e73-414a-b19e-3879fd58bffe", 
                "target": "intel-flathead-creek-1", 
                "target.hostname": "intel-flathead-creek-1", 
                "target.device_version": "error", 
                "collection": "weekend-benchmarking", 
                "role": "hostA", 
                "build": "8160507", 
                "target.device_type": "vlm-pxe-master", 
                "group_size": "2"
            }, 
            "time_check_performed": false
        }, 
        {
            "software_context": {
                "sources": [
                    {
                        "project_name": "lava-ovp-test-definitions", 
                        "test_params": "", 
                        "branch_url": "git://ala-git/lava-ovp-test-definitions", 
                        "branch_vcs": "git", 
                        "default_params": "{'SUBNET': 128.224, 'DOMAIN': 'wrs.com'}", 
                        "branch_revision": "001a356a68146742e14c320c634533a7d61072df"
                    }
                ], 
                "image": {
                    "name": "Wind River Linux 8.0.0.0 \n"
                }, 
                "packages": []
            }, 
            "attachments": [
                {
                    "content": "PExBVkFfU0lHTkFMX1NUQVJUUlVOIGlwLXNldHVwIDNjMDYwYzE2LTY2NjYtNGEzYi1iODI2LTRiMDU4MDQzYTA4Mj4KPExBVkFfTVVMVElfTk9ERT4gPExBVkFfU1lOQyBpcF9zZXR1cF9pbml0Pgo8TEFWQV9NVUxUSV9OT0RFPiA8TEFWQV9TRU5EIGlwX2RhdGEgaXB2ND0xMjguMjI0LjE0OS4zNyBtYWM9YWM6MjI6MGI6NTA6ZGM6NTAgaWZhY2U9ZXRoMD4KPExBVkFfTVVMVElfTk9ERT4gPExBVkFfV0FJVF9BTEwgaXBfZGF0YT4KPExBVkFfU0lHTkFMX1RFU1RDQVNFIFRFU1RfQ0FTRV9JRD1pcF9jb25maWdfc2FuaXR5IFJFU1VMVD1wYXNzPgo8TEFWQV9TSUdOQUxfRU5EUlVOIGlwLXNldHVwIDNjMDYwYzE2LTY2NjYtNGEzYi1iODI2LTRiMDU4MDQzYTA4Mj4K", 
                    "pathname": "stdout.log", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "bWV0YWRhdGE6IHtkZXNjcmlwdGlvbjogJ1NoYXJlIElQIGFkZHJlc3NlcyBhbmQgY29uZmlndXJlIC9ldGMvaG9zdHMsIGhvc3RuYW1lJywgZm9ybWF0OiBMYXZhLVRlc3QtU2hlbGwKICAgIFRlc3QgRGVmaW5pdGlvbiAxLjAsIG5hbWU6IGlwLXNldHVwfQpwYXJhbXM6IHtET01BSU46IHdycy5jb20sIFNVQk5FVDogMTI4LjIyNH0KcnVuOgogIHN0ZXBzOiBbb3ZwL25ldC9pcF9zZXR1cC5zaCAiJFNVQk5FVCIgIiRET01BSU4iICJlbmFibGUtd29ya2Fyb3VuZCJdCg==", 
                    "pathname": "testdef.yaml", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "MAo=", 
                    "pathname": "return_code", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "IyMjZGVmYXVsdCBwYXJhbWV0ZXJzIGZyb20geWFtbCMjIwpTVUJORVQ9JzEyOC4yMjQnCkRPTUFJTj0nd3JzLmNvbScKIyMjIyMjCiMjI3Rlc3QgcGFyYW1ldGVycyBmcm9tIGpzb24jIyMKIyMjIyMjCnNldCAtZQpleHBvcnQgVEVTVFJVTl9JRD1pcC1zZXR1cApjZCAvbGF2YS1pbnRlbC1mbGF0aGVhZC1jcmVlay0xL3Rlc3RzLzJfaXAtc2V0dXAKVVVJRD1gY2F0IHV1aWRgCmVjaG8gIjxMQVZBX1NJR05BTF9TVEFSVFJVTiAkVEVTVFJVTl9JRCAkVVVJRD4iCiN3YWl0IGZvciBhbiBhY2sgZnJvbSB0aGUgZGlzcGF0Y2hlcgpyZWFkCm92cC9uZXQvaXBfc2V0dXAuc2ggIiRTVUJORVQiICIkRE9NQUlOIiAiZW5hYmxlLXdvcmthcm91bmQiCmVjaG8gIjxMQVZBX1NJR05BTF9FTkRSVU4gJFRFU1RSVU5fSUQgJFVVSUQ+Igojd2FpdCBmb3IgYW4gYWNrIGZyb20gdGhlIGRpc3BhdGNoZXIKcmVhZAo=", 
                    "pathname": "run.sh", 
                    "mime_type": "text/plain"
                }
            ], 
            "test_id": "ip-setup", 
            "analyzer_assigned_date": "2016-05-08T00:17:47Z", 
            "test_results": [
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 5, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "ip_config_sanity"
                }
            ], 
            "testdef_metadata": {
                "description": "Share IP addresses and configure /etc/hosts, hostname", 
                "format": "Lava-Test-Shell Test Definition 1.0", 
                "url": "git://ala-git/lava-ovp-test-definitions", 
                "devices": "", 
                "environment": "", 
                "version": "001a356a68146742e14c320c634533a7d61072df", 
                "location": "GIT", 
                "os": ""
            }, 
            "hardware_context": {
                "devices": [
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #0", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #1", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #2", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #3", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "revision": "?"
                        }, 
                        "description": "GenuineIntel", 
                        "device_type": "device.board"
                    }, 
                    {
                        "description": "8107624 kB of RAM", 
                        "device_type": "device.mem"
                    }
                ]
            }, 
            "analyzer_assigned_uuid": "3c060c16-6666-4a3b-b826-4b058043a082", 
            "attributes": {
                "kernel-boot-time": "207.26", 
                "target_group": "c7dd33d2-3e73-414a-b19e-3879fd58bffe", 
                "target": "intel-flathead-creek-1", 
                "target.hostname": "intel-flathead-creek-1", 
                "target.device_version": "error", 
                "collection": "weekend-benchmarking", 
                "role": "hostA", 
                "build": "8160507", 
                "target.device_type": "vlm-pxe-master", 
                "group_size": "2"
            }, 
            "time_check_performed": false
        }, 
        {
            "software_context": {
                "sources": [
                    {
                        "project_name": "lava-ovp-test-definitions", 
                        "test_params": "{u'GUEST_NAME': u'guest1', u'GUEST_KERNEL': u'http://yow-lpd-lava1.wrs.com:8080/common/latest/ovp_guest-WRLINUX_8_0_HEAD/x86-64-kvm-guest-bzImage-WR8.0.0.0_ovp', u'GUEST_ROOTFS': u'http://yow-lpd-lava1.wrs.com:8080/common/latest/ovp_guest-WRLINUX_8_0_HEAD/x86-64-kvm-guest-wrlinux-image-ovp-guest-ovp-dist.ext3.bz2'}", 
                        "branch_url": "git://ala-git/lava-ovp-test-definitions", 
                        "branch_vcs": "git", 
                        "default_params": "{'GUEST_NAME': 'guest1', 'LENGTH': 60, 'GUEST_RPM_REPO': 'None', 'OVP_DEBUG': '', 'GUEST_KERNEL': 'None', 'GUEST_ROOTFS': 'None', 'TARGET_RPMS': 'None'}", 
                        "branch_revision": "001a356a68146742e14c320c634533a7d61072df"
                    }
                ], 
                "image": {
                    "name": "Wind River Linux 8.0.0.0 \n"
                }, 
                "packages": []
            }, 
            "attachments": [
                {
                    "content": "PExBVkFfU0lHTkFMX1NUQVJUUlVOIHNldHVwLWd1ZXN0IDkxY2ZhOGQxLTFhMDYtNDMzOC1hNmJjLTA2NzUzMmYwMTA4OD4KPExBVkFfU0lHTkFMX1NUQVJUVEMgcHJlcF9ndWVzdD4KL2Rldi9uYmQwIGRpc2Nvbm5lY3RlZAovZGV2L25iZDAgZGlzY29ubmVjdGVkCnByZXBfZ3Vlc3Quc2g6IHBhc3MKPExBVkFfU0lHTkFMX0VORFRDIHByZXBfZ3Vlc3Q+CjxMQVZBX1NJR05BTF9URVNUQ0FTRSBURVNUX0NBU0VfSUQ9cHJlcF9ndWVzdCBSRVNVTFQ9cGFzcz4KPExBVkFfU0lHTkFMX1NUQVJUVEMgcHJlcF9ndWVzdF9ycG1zPgo8TEFWQV9TSUdOQUxfRU5EVEMgcHJlcF9ndWVzdF9ycG1zPgo8TEFWQV9TSUdOQUxfVEVTVENBU0UgVEVTVF9DQVNFX0lEPXByZXBfZ3Vlc3RfcnBtcyBSRVNVTFQ9cGFzcz4KPExBVkFfU0lHTkFMX1NUQVJUVEMgY29weV9ndWVzdD4KPExBVkFfU0lHTkFMX0VORFRDIGNvcHlfZ3Vlc3Q+CjxMQVZBX1NJR05BTF9URVNUQ0FTRSBURVNUX0NBU0VfSUQ9Y29weV9ndWVzdCBSRVNVTFQ9cGFzcz4KPExBVkFfU0lHTkFMX0VORFJVTiBzZXR1cC1ndWVzdCA5MWNmYThkMS0xYTA2LTQzMzgtYTZiYy0wNjc1MzJmMDEwODg+Cg==", 
                    "pathname": "stdout.log", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "bWV0YWRhdGE6CiAgZGVzY3JpcHRpb246IFVzZWQgdG8gc2V0dXAgbmFtZWQgZ3Vlc3RzIG9uIGEgaG9zdC4gIElmIHNldmVyYWwgbmFtZXMgYXJlIHByb3ZpZGVkCiAgICBpbiBHVUVTVF9OQU1FIHRoZW4gdGhlIHNhbWUgaW1hZ2UgcHJvdmlkZWQgYnkgR1VFU1RfS0VSTkVMLCBHVUVTVF9ST09URlMgYW5kIEdVRVNUX1JQTV9SRVBPCiAgICB3aWxsIGJlIGR1cGxpY2F0ZWQgZm9yIGVhY2ggbmFtZWQgZ3Vlc3QuCiAgZGV2aWNlczogW3ZsbS1weGUtbWFzdGVyXQogIGZvcm1hdDogTGF2YS1UZXN0IFRlc3QgRGVmaW5pdGlvbiAxLjAKICBtYWludGFpbmVyOiBbbWljaGVsLnRoZWJlYXVAd2luZHJpdmVyLmNvbV0KICBuYW1lOiBzZXR1cC1ndWVzdAogIG9zOiBbd3JsXQogIHNjb3BlOiBbZ3Vlc3RdCnBhcmFtczoge0dVRVNUX0tFUk5FTDogTm9uZSwgR1VFU1RfTkFNRTogZ3Vlc3QxLCBHVUVTVF9ST09URlM6IE5vbmUsIEdVRVNUX1JQTV9SRVBPOiBOb25lLAogIExFTkdUSDogNjAsIE9WUF9ERUJVRzogJycsIFRBUkdFVF9SUE1TOiBOb25lfQpydW46CiAgc3RlcHM6IFtleHBvcnQgT1ZQX0RFQlVHLCBHVUVTVDE9JCggZWNobyAkR1VFU1RfTkFNRSB8IGN1dCAtZCAiICIgLWYxICksIGxhdmEtdGVzdC1jYXNlCiAgICAgIHByZXBfZ3Vlc3QgLS1zaGVsbCAuL292cC9ndWVzdC9wcmVwX2d1ZXN0LnNoICRHVUVTVDEgJEdVRVNUX0tFUk5FTCAkR1VFU1RfUk9PVEZTLAogICAgbGF2YS10ZXN0LWNhc2UgcHJlcF9ndWVzdF9ycG1zIC0tc2hlbGwgZXZhbCAiLi9vdnAvZ3Vlc3QvcHJlcF9ndWVzdF9ycG1zLnNoICRHVUVTVDEKICAgICAgJEdVRVNUX1JPT1RGUyAkR1VFU1RfUlBNX1JFUE8gJyRUQVJHRVRfUlBNUyciLCBsYXZhLXRlc3QtY2FzZSBjb3B5X2d1ZXN0IC0tc2hlbGwKICAgICAgLi9vdnAvZ3Vlc3QvY29weV9ndWVzdC5zaCAkR1VFU1RfTkFNRV0K", 
                    "pathname": "testdef.yaml", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "MAo=", 
                    "pathname": "return_code", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "IyMjZGVmYXVsdCBwYXJhbWV0ZXJzIGZyb20geWFtbCMjIwpHVUVTVF9OQU1FPSdndWVzdDEnCkxFTkdUSD0nNjAnCkdVRVNUX1JQTV9SRVBPPSdOb25lJwpPVlBfREVCVUc9JycKR1VFU1RfS0VSTkVMPSdOb25lJwpHVUVTVF9ST09URlM9J05vbmUnClRBUkdFVF9SUE1TPSdOb25lJwojIyMjIyMKIyMjdGVzdCBwYXJhbWV0ZXJzIGZyb20ganNvbiMjIwpHVUVTVF9OQU1FPSdndWVzdDEnCkdVRVNUX0tFUk5FTD0naHR0cDovL3lvdy1scGQtbGF2YTEud3JzLmNvbTo4MDgwL2NvbW1vbi9sYXRlc3Qvb3ZwX2d1ZXN0LVdSTElOVVhfOF8wX0hFQUQveDg2LTY0LWt2bS1ndWVzdC1iekltYWdlLVdSOC4wLjAuMF9vdnAnCkdVRVNUX1JPT1RGUz0naHR0cDovL3lvdy1scGQtbGF2YTEud3JzLmNvbTo4MDgwL2NvbW1vbi9sYXRlc3Qvb3ZwX2d1ZXN0LVdSTElOVVhfOF8wX0hFQUQveDg2LTY0LWt2bS1ndWVzdC13cmxpbnV4LWltYWdlLW92cC1ndWVzdC1vdnAtZGlzdC5leHQzLmJ6MicKIyMjIyMjCnNldCAtZQpleHBvcnQgVEVTVFJVTl9JRD1zZXR1cC1ndWVzdApjZCAvbGF2YS1pbnRlbC1mbGF0aGVhZC1jcmVlay0xL3Rlc3RzLzNfc2V0dXAtZ3Vlc3QKVVVJRD1gY2F0IHV1aWRgCmVjaG8gIjxMQVZBX1NJR05BTF9TVEFSVFJVTiAkVEVTVFJVTl9JRCAkVVVJRD4iCiN3YWl0IGZvciBhbiBhY2sgZnJvbSB0aGUgZGlzcGF0Y2hlcgpyZWFkCmV4cG9ydCBPVlBfREVCVUcKR1VFU1QxPSQoIGVjaG8gJEdVRVNUX05BTUUgfCBjdXQgLWQgIiAiIC1mMSApCmxhdmEtdGVzdC1jYXNlIHByZXBfZ3Vlc3QgLS1zaGVsbCAuL292cC9ndWVzdC9wcmVwX2d1ZXN0LnNoICRHVUVTVDEgJEdVRVNUX0tFUk5FTCAkR1VFU1RfUk9PVEZTCmxhdmEtdGVzdC1jYXNlIHByZXBfZ3Vlc3RfcnBtcyAtLXNoZWxsIGV2YWwgIi4vb3ZwL2d1ZXN0L3ByZXBfZ3Vlc3RfcnBtcy5zaCAkR1VFU1QxICRHVUVTVF9ST09URlMgJEdVRVNUX1JQTV9SRVBPICckVEFSR0VUX1JQTVMnIgpsYXZhLXRlc3QtY2FzZSBjb3B5X2d1ZXN0IC0tc2hlbGwgLi9vdnAvZ3Vlc3QvY29weV9ndWVzdC5zaCAkR1VFU1RfTkFNRQplY2hvICI8TEFWQV9TSUdOQUxfRU5EUlVOICRURVNUUlVOX0lEICRVVUlEPiIKI3dhaXQgZm9yIGFuIGFjayBmcm9tIHRoZSBkaXNwYXRjaGVyCnJlYWQK", 
                    "pathname": "run.sh", 
                    "mime_type": "text/plain"
                }
            ], 
            "test_id": "setup-guest", 
            "analyzer_assigned_date": "2016-05-08T00:17:47Z", 
            "test_results": [
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 7, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "prep_guest"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 10, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "prep_guest_rpms"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 13, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "copy_guest"
                }
            ], 
            "testdef_metadata": {
                "description": "Used to setup named guests on a host.  If several names are provided in GUEST_NAME then the same image provided by GUEST_KERNEL, GUEST_ROOTFS and GUEST_RPM_REPO will be duplicated for each named guest.", 
                "format": "Lava-Test Test Definition 1.0", 
                "url": "git://ala-git/lava-ovp-test-definitions", 
                "devices": "vlm-pxe-master", 
                "environment": "", 
                "version": "001a356a68146742e14c320c634533a7d61072df", 
                "location": "GIT", 
                "os": "wrl"
            }, 
            "hardware_context": {
                "devices": [
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #0", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #1", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #2", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #3", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "revision": "?"
                        }, 
                        "description": "GenuineIntel", 
                        "device_type": "device.board"
                    }, 
                    {
                        "description": "8107624 kB of RAM", 
                        "device_type": "device.mem"
                    }
                ]
            }, 
            "analyzer_assigned_uuid": "91cfa8d1-1a06-4338-a6bc-067532f01088", 
            "attributes": {
                "kernel-boot-time": "207.26", 
                "target_group": "c7dd33d2-3e73-414a-b19e-3879fd58bffe", 
                "target": "intel-flathead-creek-1", 
                "target.hostname": "intel-flathead-creek-1", 
                "target.device_version": "error", 
                "collection": "weekend-benchmarking", 
                "role": "hostA", 
                "build": "8160507", 
                "target.device_type": "vlm-pxe-master", 
                "group_size": "2"
            }, 
            "time_check_performed": false
        }, 
        {
            "software_context": {
                "sources": [
                    {
                        "project_name": "lava-ovp-test-definitions", 
                        "test_params": "{u'IMAGES_DIR': u'/exports/guest1/', u'BRIDGE': u'br-ovp', u'GUEST_IMAGES_DIR': u'/guest-images'}", 
                        "branch_url": "git://ala-git/lava-ovp-test-definitions", 
                        "branch_vcs": "git", 
                        "default_params": "{'IMAGES_DIR': 'None', 'BRIDGE': 'None', 'GUEST_IMAGES_DIR': 'None'}", 
                        "branch_revision": "001a356a68146742e14c320c634533a7d61072df"
                    }
                ], 
                "image": {
                    "name": "Wind River Linux 8.0.0.0 \n"
                }, 
                "packages": []
            }, 
            "attachments": [
                {
                    "content": "PExBVkFfU0lHTkFMX1NUQVJUUlVOIHNldHVwLW5ldHdvcmsgYzRmYmJmM2QtMzc0Ni00NjY0LWFiMDctNGQwOWJiNDA0MDY5Pgo8TEFWQV9NVUxUSV9OT0RFPiA8TEFWQV9TWU5DIG5mc19zZXR1cD4KPExBVkFfU0lHTkFMX1NUQVJUVEMgc2V0dXBfYnJpZGdlPgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpEZWxldGUgdGhlIElQIG9mIGFjdGl2ZSBldGgsIHRoaXMgSVAgd2lsbCBiZSBzZXQgb24gc3dpdGNoCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCkFkZCBJUCAxMjguMjI0LjE0OS4zNyB0byBzd2l0Y2ggYnItb3ZwCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpBZGQgZGVmYXVsdCBndyAxMjguMjI0LjE0OS4xIHRvIHN3aXRjaCBici1vdnAKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCkFkZCBwb3J0IGV0aDAgdG8gYnItb3ZwCjxMQVZBX1NJR05BTF9FTkRUQyBzZXR1cF9icmlkZ2U+CjxMQVZBX1NJR05BTF9URVNUQ0FTRSBURVNUX0NBU0VfSUQ9c2V0dXBfYnJpZGdlIFJFU1VMVD1wYXNzPgo8TEFWQV9TSUdOQUxfU1RBUlRUQyBzZXR1cF9uZnNfcG9vbD4KUG9vbCBuZnNfcG9vbCBkZWZpbmVkIGZyb20gbmZzX3Bvb2wueG1sCgpQb29sIG5mc19wb29sIHN0YXJ0ZWQKCjxMQVZBX1NJR05BTF9FTkRUQyBzZXR1cF9uZnNfcG9vbD4KPExBVkFfU0lHTkFMX1RFU1RDQVNFIFRFU1RfQ0FTRV9JRD1zZXR1cF9uZnNfcG9vbCBSRVNVTFQ9cGFzcz4KPExBVkFfU0lHTkFMX0VORFJVTiBzZXR1cC1uZXR3b3JrIGM0ZmJiZjNkLTM3NDYtNDY2NC1hYjA3LTRkMDliYjQwNDA2OT4K", 
                    "pathname": "stdout.log", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "bWV0YWRhdGE6IHtkZXNjcmlwdGlvbjogU2V0dXAgYnJpZGdlIGFuZCBuZnMgbmVlZGVkIGZvciB0ZXN0aW5nLCBmb3JtYXQ6IExhdmEtVGVzdC1TaGVsbAogICAgVGVzdCBEZWZpbml0aW9uIDEuMCwgbmFtZTogc2V0dXAtbmV0d29ya30KcGFyYW1zOiB7QlJJREdFOiBOb25lLCBHVUVTVF9JTUFHRVNfRElSOiBOb25lLCBJTUFHRVNfRElSOiBOb25lfQpydW46CiAgc3RlcHM6IFtsYXZhLXN5bmMgbmZzX3NldHVwLCBsYXZhLXRlc3QtY2FzZSBzZXR1cF9icmlkZ2UgLS1zaGVsbCBvdnAvbmV0L3NldHVwX2JyaWRnZS5zaAogICAgICAkQlJJREdFLCBwcmltYXJ5PSQobGF2YS1ncm91cCBob3N0QSksIHNlY29uZGFyeT0kKGxhdmEtZ3JvdXAgaG9zdEIpLCAnaWYgWyAkKGxhdmEtcm9sZSkKICAgICAgPSAiaG9zdEEiIF07IHRoZW4gaG9zdG5hbWUgJHByaW1hcnk7IGVsc2UgaG9zdG5hbWUgJHNlY29uZGFyeTsgZmknLCBsYXZhLXRlc3QtY2FzZQogICAgICBzZXR1cF9uZnNfcG9vbCAtLXNoZWxsIG92cC9uZXQvc2V0dXBfbmZzX3Bvb2wuc2ggLWggJHByaW1hcnkgLWQgIiRJTUFHRVNfRElSIgogICAgICAtbSAiJEdVRVNUX0lNQUdFU19ESVIiXQo=", 
                    "pathname": "testdef.yaml", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "MAo=", 
                    "pathname": "return_code", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "IyMjZGVmYXVsdCBwYXJhbWV0ZXJzIGZyb20geWFtbCMjIwpJTUFHRVNfRElSPSdOb25lJwpCUklER0U9J05vbmUnCkdVRVNUX0lNQUdFU19ESVI9J05vbmUnCiMjIyMjIwojIyN0ZXN0IHBhcmFtZXRlcnMgZnJvbSBqc29uIyMjCklNQUdFU19ESVI9Jy9leHBvcnRzL2d1ZXN0MS8nCkJSSURHRT0nYnItb3ZwJwpHVUVTVF9JTUFHRVNfRElSPScvZ3Vlc3QtaW1hZ2VzJwojIyMjIyMKc2V0IC1lCmV4cG9ydCBURVNUUlVOX0lEPXNldHVwLW5ldHdvcmsKY2QgL2xhdmEtaW50ZWwtZmxhdGhlYWQtY3JlZWstMS90ZXN0cy80X3NldHVwLW5ldHdvcmsKVVVJRD1gY2F0IHV1aWRgCmVjaG8gIjxMQVZBX1NJR05BTF9TVEFSVFJVTiAkVEVTVFJVTl9JRCAkVVVJRD4iCiN3YWl0IGZvciBhbiBhY2sgZnJvbSB0aGUgZGlzcGF0Y2hlcgpyZWFkCmxhdmEtc3luYyBuZnNfc2V0dXAKbGF2YS10ZXN0LWNhc2Ugc2V0dXBfYnJpZGdlIC0tc2hlbGwgb3ZwL25ldC9zZXR1cF9icmlkZ2Uuc2ggJEJSSURHRQpwcmltYXJ5PSQobGF2YS1ncm91cCBob3N0QSkKc2Vjb25kYXJ5PSQobGF2YS1ncm91cCBob3N0QikKaWYgWyAkKGxhdmEtcm9sZSkgPSAiaG9zdEEiIF07IHRoZW4gaG9zdG5hbWUgJHByaW1hcnk7IGVsc2UgaG9zdG5hbWUgJHNlY29uZGFyeTsgZmkKbGF2YS10ZXN0LWNhc2Ugc2V0dXBfbmZzX3Bvb2wgLS1zaGVsbCBvdnAvbmV0L3NldHVwX25mc19wb29sLnNoIC1oICRwcmltYXJ5IC1kICIkSU1BR0VTX0RJUiIgLW0gIiRHVUVTVF9JTUFHRVNfRElSIgplY2hvICI8TEFWQV9TSUdOQUxfRU5EUlVOICRURVNUUlVOX0lEICRVVUlEPiIKI3dhaXQgZm9yIGFuIGFjayBmcm9tIHRoZSBkaXNwYXRjaGVyCnJlYWQK", 
                    "pathname": "run.sh", 
                    "mime_type": "text/plain"
                }
            ], 
            "test_id": "setup-network", 
            "analyzer_assigned_date": "2016-05-08T00:17:47Z", 
            "test_results": [
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 13, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "setup_bridge"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 20, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "setup_nfs_pool"
                }
            ], 
            "testdef_metadata": {
                "description": "Setup bridge and nfs needed for testing", 
                "format": "Lava-Test-Shell Test Definition 1.0", 
                "url": "git://ala-git/lava-ovp-test-definitions", 
                "devices": "", 
                "environment": "", 
                "version": "001a356a68146742e14c320c634533a7d61072df", 
                "location": "GIT", 
                "os": ""
            }, 
            "hardware_context": {
                "devices": [
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #0", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #1", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #2", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "4", 
                            "bogomips": "4589.40", 
                            "core id": "3", 
                            "apicid": "6", 
                            "fpu_exception": "yes", 
                            "stepping": "3", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x1e", 
                            "cpu MHz": "2300.000", 
                            "cache size": "6144 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "4", 
                            "physical id": "0", 
                            "address sizes": "39 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm xsaveopt", 
                            "cpu_type": "Intel(R) Core(TM) i5-4670T CPU @ 2.30GHz", 
                            "model": "60", 
                            "initial apicid": "6"
                        }, 
                        "description": "Processor #3", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "revision": "?"
                        }, 
                        "description": "GenuineIntel", 
                        "device_type": "device.board"
                    }, 
                    {
                        "description": "8107624 kB of RAM", 
                        "device_type": "device.mem"
                    }
                ]
            }, 
            "analyzer_assigned_uuid": "c4fbbf3d-3746-4664-ab07-4d09bb404069", 
            "attributes": {
                "kernel-boot-time": "207.26", 
                "target_group": "c7dd33d2-3e73-414a-b19e-3879fd58bffe", 
                "target": "intel-flathead-creek-1", 
                "target.hostname": "intel-flathead-creek-1", 
                "target.device_version": "error", 
                "collection": "weekend-benchmarking", 
                "role": "hostA", 
                "build": "8160507", 
                "target.device_type": "vlm-pxe-master", 
                "group_size": "2"
            }, 
            "time_check_performed": false
        }, 
        {
            "attachments": [], 
            "tags": [], 
            "analyzer_assigned_date": "2016-05-07T20:01:00Z", 
            "time_check_performed": false, 
            "test_results": [
                {
                    "message": "", 
                    "test_case_id": "deploy_linaro_kernel", 
                    "result": "pass"
                }, 
                {
                    "message": "", 
                    "test_case_id": "lava_test_shell", 
                    "result": "pass"
                }, 
                {
                    "message": "", 
                    "test_case_id": "gather_results", 
                    "result": "pass"
                }, 
                {
                    "message": "", 
                    "test_case_id": "job_complete", 
                    "result": "pass"
                }
            ], 
            "analyzer_assigned_uuid": "6b933d52-148e-11e6-99b6-f8b156ac4595", 
            "attributes": {
                "kernel-boot-time": "207.26", 
                "target_group": "c7dd33d2-3e73-414a-b19e-3879fd58bffe", 
                "target": "intel-flathead-creek-1", 
                "target.hostname": "intel-flathead-creek-1", 
                "target.device_version": "error", 
                "collection": "weekend-benchmarking", 
                "role": "hostA", 
                "build": "8160507", 
                "target.device_type": "vlm-pxe-master", 
                "group_size": "2"
            }, 
            "test_id": "lava"
        }, 
        {
            "software_context": {
                "sources": [
                    {
                        "project_name": "lava-ovp-test-definitions", 
                        "test_params": "{u'BASEURL': u'http://yow-lpd-lava1.wrs.com:8080/common/latest/ovp_kvm_testing-WRLINUX_8_0_HEAD/corei7_64'}", 
                        "branch_url": "git://ala-git/lava-ovp-test-definitions", 
                        "branch_vcs": "git", 
                        "default_params": "{'BASEURL': 'http://yow-lpd-lava1.wrs.com:8080/common/latest/ovp_kvm-WRLINUX_8_0_HEAD/RPMS'}", 
                        "branch_revision": "001a356a68146742e14c320c634533a7d61072df"
                    }
                ], 
                "image": {
                    "name": "Wind River Linux 8.0.0.0 \n"
                }, 
                "packages": []
            }, 
            "attachments": [
                {
                    "content": "PExBVkFfU0lHTkFMX1NUQVJUUlVOIHNtYXJ0LWFkZC1sYXZhLWNoYW5uZWwgYjA2ZDEyODQtNTQxMi00MzFiLWE4ZjctMmI0ZmYxMTVmZTAxPgo8TEFWQV9TSUdOQUxfU1RBUlRUQyBzbWFydF9zZXR1cF9sYXZhX2ZlZWQ+CkFkZGluZyB0aGUgbGF2YSBzZXJ2ZXIgcGFja2FnZSBmZWVkIGNoYW5uZWwgdG8gc21hcnQ6IGFkZF9sYXZhX2NoYW5uZWxfc2g6IHBhc3MKPExBVkFfU0lHTkFMX0VORFRDIHNtYXJ0X3NldHVwX2xhdmFfZmVlZD4KPExBVkFfU0lHTkFMX1RFU1RDQVNFIFRFU1RfQ0FTRV9JRD1zbWFydF9zZXR1cF9sYXZhX2ZlZWQgUkVTVUxUPXBhc3M+CjxMQVZBX1NJR05BTF9FTkRSVU4gc21hcnQtYWRkLWxhdmEtY2hhbm5lbCBiMDZkMTI4NC01NDEyLTQzMWItYThmNy0yYjRmZjExNWZlMDE+Cg==", 
                    "pathname": "stdout.log", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "bWV0YWRhdGE6CiAgZGVzY3JpcHRpb246IENvbmZpZ3VyZXMgdGhlIERVVCBzbWFydCBpbnN0YW5jZSB0byBiZSBhd2FyZSBvZiB0aGUgbGF2YSBwYWNrYWdlIHJlcG8uCiAgZm9ybWF0OiBMYXZhLVRlc3QgVGVzdCBEZWZpbml0aW9uIDEuMAogIG1haW50YWluZXI6IFttYXJrLmFzc2Vsc3RpbmVAd2luZHJpdmVyLmNvbV0KICBuYW1lOiBzbWFydC1hZGQtbGF2YS1jaGFubmVsCiAgb3M6IFt3cmxdCiAgc2NvcGU6IFtmdW5jdGlvbmFsXQpwYXJhbXM6IHtCQVNFVVJMOiAnaHR0cDovL3lvdy1scGQtbGF2YTEud3JzLmNvbTo4MDgwL2NvbW1vbi9sYXRlc3Qvb3ZwX2t2bS1XUkxJTlVYXzhfMF9IRUFEL1JQTVMnfQpwYXJzZToge3BhdHRlcm46ICcoP1A8dGVzdF9jYXNlX2lkPlsgL2EtekEtWjAtOV0rKTogKD9QPHJlc3VsdD5bQS1aXSspJ30KcnVuOgogIHN0ZXBzOiBbbGF2YS10ZXN0LWNhc2Ugc21hcnRfc2V0dXBfbGF2YV9mZWVkIC0tc2hlbGwgLi9vdnAvc21hcnQvYWRkX2xhdmFfY2hhbm5lbC5zaAogICAgICAkQkFTRVVSTF0K", 
                    "pathname": "testdef.yaml", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "MAo=", 
                    "pathname": "return_code", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "IyMjZGVmYXVsdCBwYXJhbWV0ZXJzIGZyb20geWFtbCMjIwpCQVNFVVJMPSdodHRwOi8veW93LWxwZC1sYXZhMS53cnMuY29tOjgwODAvY29tbW9uL2xhdGVzdC9vdnBfa3ZtLVdSTElOVVhfOF8wX0hFQUQvUlBNUycKIyMjIyMjCiMjI3Rlc3QgcGFyYW1ldGVycyBmcm9tIGpzb24jIyMKQkFTRVVSTD0naHR0cDovL3lvdy1scGQtbGF2YTEud3JzLmNvbTo4MDgwL2NvbW1vbi9sYXRlc3Qvb3ZwX2t2bV90ZXN0aW5nLVdSTElOVVhfOF8wX0hFQUQvY29yZWk3XzY0JwojIyMjIyMKc2V0IC1lCmV4cG9ydCBURVNUUlVOX0lEPXNtYXJ0LWFkZC1sYXZhLWNoYW5uZWwKY2QgL2xhdmEtaW50ZWwtaXJvbi1wYXNzLTEvdGVzdHMvMV9zbWFydC1hZGQtbGF2YS1jaGFubmVsClVVSUQ9YGNhdCB1dWlkYAplY2hvICI8TEFWQV9TSUdOQUxfU1RBUlRSVU4gJFRFU1RSVU5fSUQgJFVVSUQ+Igojd2FpdCBmb3IgYW4gYWNrIGZyb20gdGhlIGRpc3BhdGNoZXIKcmVhZApsYXZhLXRlc3QtY2FzZSBzbWFydF9zZXR1cF9sYXZhX2ZlZWQgLS1zaGVsbCAuL292cC9zbWFydC9hZGRfbGF2YV9jaGFubmVsLnNoICRCQVNFVVJMCmVjaG8gIjxMQVZBX1NJR05BTF9FTkRSVU4gJFRFU1RSVU5fSUQgJFVVSUQ+Igojd2FpdCBmb3IgYW4gYWNrIGZyb20gdGhlIGRpc3BhdGNoZXIKcmVhZAo=", 
                    "pathname": "run.sh", 
                    "mime_type": "text/plain"
                }
            ], 
            "test_id": "smart-add-lava-channel", 
            "analyzer_assigned_date": "2016-05-08T00:09:10Z", 
            "test_results": [
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 5, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "smart_setup_lava_feed"
                }
            ], 
            "testdef_metadata": {
                "description": "Configures the DUT smart instance to be aware of the lava package repo.", 
                "format": "Lava-Test Test Definition 1.0", 
                "url": "git://ala-git/lava-ovp-test-definitions", 
                "devices": "", 
                "environment": "", 
                "version": "001a356a68146742e14c320c634533a7d61072df", 
                "location": "GIT", 
                "os": "wrl"
            }, 
            "hardware_context": {
                "devices": [
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #0", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #1", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #2", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #3", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #4", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #5", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #6", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #7", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #8", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #9", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #10", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #11", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #12", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #13", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #14", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #15", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #16", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #17", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #18", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #19", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #20", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #21", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #22", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #23", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #24", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #25", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #26", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #27", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #28", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #29", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #30", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #31", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "revision": "?"
                        }, 
                        "description": "GenuineIntel", 
                        "device_type": "device.board"
                    }, 
                    {
                        "description": "132026112 kB of RAM", 
                        "device_type": "device.mem"
                    }
                ]
            }, 
            "analyzer_assigned_uuid": "b06d1284-5412-431b-a8f7-2b4ff115fe01", 
            "attributes": {
                "kernel-boot-time": "104.36", 
                "target_group": "c7dd33d2-3e73-414a-b19e-3879fd58bffe", 
                "target": "intel-iron-pass-1", 
                "target.hostname": "intel-iron-pass-1", 
                "target.device_version": "error", 
                "collection": "weekend-benchmarking", 
                "role": "hostB", 
                "build": "8160507", 
                "target.device_type": "vlm-pxe-master", 
                "group_size": "2"
            }, 
            "time_check_performed": false
        }, 
        {
            "software_context": {
                "sources": [
                    {
                        "project_name": "lava-ovp-test-definitions", 
                        "test_params": "", 
                        "branch_url": "git://ala-git/lava-ovp-test-definitions", 
                        "branch_vcs": "git", 
                        "default_params": "", 
                        "branch_revision": "001a356a68146742e14c320c634533a7d61072df"
                    }
                ], 
                "image": {
                    "name": "Wind River Linux 8.0.0.0 \n"
                }, 
                "packages": []
            }, 
            "attachments": [
                {
                    "content": "PExBVkFfU0lHTkFMX1NUQVJUUlVOIGludGVyLW5vZGUtbWlncmF0ZS1iZW5jaG1hcmstb24taG9zdC1CIDhmOGIxMjQzLWE2MDUtNGZkNy04YjAyLTk2MzgzMThiOTJjYT4KPExBVkFfTVVMVElfTk9ERT4gPExBVkFfV0FJVCBsaXZlX21pZ3JhdGlvbl9uMm5fZmluaXNoZWQ+CjxMQVZBX1NJR05BTF9FTkRSVU4gaW50ZXItbm9kZS1taWdyYXRlLWJlbmNobWFyay1vbi1ob3N0LUIgOGY4YjEyNDMtYTYwNS00ZmQ3LThiMDItOTYzODMxOGI5MmNhPgo=", 
                    "pathname": "stdout.log", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "bWV0YWRhdGE6IHtkZXNjcmlwdGlvbjogUHJlcGFyZSBob3N0IEIgZm9yIGludGVyIGxpdmUgbWlncmF0aW9uIG5ldCBkb3dudGltZSBiZW5jaG1hcmsuCiAgICBJbiBmYWN0IHRoZXJlIGlzIG5vdGhpbmcgdG8gcHJlcGFyZSBvbiBob3N0IEIgYXMgaG9zdCBBIHdpbGwgZG8gZXZlcnl0aGluZy4gIFBsZWFzZQogICAgcmVmZXIgdG8gbWlncmF0ZV9iZW5jaG1hcmtfaG9zdF9hLnlhbWwgZm9yIG1vcmUgZGV0YWlsLiAgVGhlIHNpZ25hbCBsaXZlX21pZ3JhdGlvbl9uMm5fZmluaXNoZWQKICAgIHdpbGwgYmUgc2VudCBmcm9tIGhvc3QgQSB3aGVuIHRoZSB0ZXN0IGlzIGRvbmUsIGZvcm1hdDogTGF2YS1UZXN0IFRlc3QgRGVmaW5pdGlvbgogICAgMS4wLCBuYW1lOiBpbnRlci1ub2RlLW1pZ3JhdGUtYmVuY2htYXJrLW9uLWhvc3QtQn0KcnVuOgogIHN0ZXBzOiBbbGF2YS13YWl0IGxpdmVfbWlncmF0aW9uX24ybl9maW5pc2hlZF0K", 
                    "pathname": "testdef.yaml", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "MAo=", 
                    "pathname": "return_code", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "IyMjZGVmYXVsdCBwYXJhbWV0ZXJzIGZyb20geWFtbCMjIwojIyMjIyMKIyMjdGVzdCBwYXJhbWV0ZXJzIGZyb20ganNvbiMjIwojIyMjIyMKc2V0IC1lCmV4cG9ydCBURVNUUlVOX0lEPWludGVyLW5vZGUtbWlncmF0ZS1iZW5jaG1hcmstb24taG9zdC1CCmNkIC9sYXZhLWludGVsLWlyb24tcGFzcy0xL3Rlc3RzLzRfaW50ZXItbm9kZS1taWdyYXRlLWJlbmNobWFyay1vbi1ob3N0LUIKVVVJRD1gY2F0IHV1aWRgCmVjaG8gIjxMQVZBX1NJR05BTF9TVEFSVFJVTiAkVEVTVFJVTl9JRCAkVVVJRD4iCiN3YWl0IGZvciBhbiBhY2sgZnJvbSB0aGUgZGlzcGF0Y2hlcgpyZWFkCmxhdmEtd2FpdCBsaXZlX21pZ3JhdGlvbl9uMm5fZmluaXNoZWQKZWNobyAiPExBVkFfU0lHTkFMX0VORFJVTiAkVEVTVFJVTl9JRCAkVVVJRD4iCiN3YWl0IGZvciBhbiBhY2sgZnJvbSB0aGUgZGlzcGF0Y2hlcgpyZWFkCg==", 
                    "pathname": "run.sh", 
                    "mime_type": "text/plain"
                }
            ], 
            "test_id": "inter-node-migrate-benchmark-on-host-B", 
            "analyzer_assigned_date": "2016-05-08T00:09:10Z", 
            "test_results": [], 
            "testdef_metadata": {
                "description": "Prepare host B for inter live migration net downtime benchmark. In fact there is nothing to prepare on host B as host A will do everything.  Please refer to migrate_benchmark_host_a.yaml for more detail.  The signal live_migration_n2n_finished will be sent from host A when the test is done", 
                "format": "Lava-Test Test Definition 1.0", 
                "url": "git://ala-git/lava-ovp-test-definitions", 
                "devices": "", 
                "environment": "", 
                "version": "001a356a68146742e14c320c634533a7d61072df", 
                "location": "GIT", 
                "os": ""
            }, 
            "hardware_context": {
                "devices": [
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #0", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #1", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #2", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #3", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #4", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #5", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #6", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #7", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #8", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #9", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #10", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #11", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #12", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #13", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #14", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #15", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #16", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #17", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #18", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #19", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #20", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #21", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #22", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #23", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #24", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #25", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #26", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #27", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #28", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #29", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #30", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #31", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "revision": "?"
                        }, 
                        "description": "GenuineIntel", 
                        "device_type": "device.board"
                    }, 
                    {
                        "description": "132026112 kB of RAM", 
                        "device_type": "device.mem"
                    }
                ]
            }, 
            "analyzer_assigned_uuid": "8f8b1243-a605-4fd7-8b02-9638318b92ca", 
            "attributes": {
                "kernel-boot-time": "104.36", 
                "target_group": "c7dd33d2-3e73-414a-b19e-3879fd58bffe", 
                "target": "intel-iron-pass-1", 
                "target.hostname": "intel-iron-pass-1", 
                "target.device_version": "error", 
                "collection": "weekend-benchmarking", 
                "role": "hostB", 
                "build": "8160507", 
                "target.device_type": "vlm-pxe-master", 
                "group_size": "2"
            }, 
            "time_check_performed": false
        }, 
        {
            "software_context": {
                "sources": [
                    {
                        "project_name": "lava-ovp-test-definitions", 
                        "test_params": "", 
                        "branch_url": "git://ala-git/lava-ovp-test-definitions", 
                        "branch_vcs": "git", 
                        "default_params": "{'SUBNET': 128.224, 'DOMAIN': 'wrs.com'}", 
                        "branch_revision": "001a356a68146742e14c320c634533a7d61072df"
                    }
                ], 
                "image": {
                    "name": "Wind River Linux 8.0.0.0 \n"
                }, 
                "packages": []
            }, 
            "attachments": [
                {
                    "content": "PExBVkFfU0lHTkFMX1NUQVJUUlVOIGlwLXNldHVwIDhlZjI4MzgyLTc3MzQtNGM1Zi1iOGNiLTExZjUyNzQ1YTkzOD4KPExBVkFfTVVMVElfTk9ERT4gPExBVkFfU1lOQyBpcF9zZXR1cF9pbml0Pgo8TEFWQV9NVUxUSV9OT0RFPiA8TEFWQV9TRU5EIGlwX2RhdGEgaXB2ND0xMjguMjI0LjE0OS4xNDcgbWFjPTAwOjFlOjY3OjU0OmE4OjdmIGlmYWNlPWV0aDE+CjxMQVZBX01VTFRJX05PREU+IDxMQVZBX1dBSVRfQUxMIGlwX2RhdGE+CjxMQVZBX1NJR05BTF9URVNUQ0FTRSBURVNUX0NBU0VfSUQ9aXBfY29uZmlnX3Nhbml0eSBSRVNVTFQ9cGFzcz4KPExBVkFfU0lHTkFMX0VORFJVTiBpcC1zZXR1cCA4ZWYyODM4Mi03NzM0LTRjNWYtYjhjYi0xMWY1Mjc0NWE5Mzg+Cg==", 
                    "pathname": "stdout.log", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "bWV0YWRhdGE6IHtkZXNjcmlwdGlvbjogJ1NoYXJlIElQIGFkZHJlc3NlcyBhbmQgY29uZmlndXJlIC9ldGMvaG9zdHMsIGhvc3RuYW1lJywgZm9ybWF0OiBMYXZhLVRlc3QtU2hlbGwKICAgIFRlc3QgRGVmaW5pdGlvbiAxLjAsIG5hbWU6IGlwLXNldHVwfQpwYXJhbXM6IHtET01BSU46IHdycy5jb20sIFNVQk5FVDogMTI4LjIyNH0KcnVuOgogIHN0ZXBzOiBbb3ZwL25ldC9pcF9zZXR1cC5zaCAiJFNVQk5FVCIgIiRET01BSU4iICJlbmFibGUtd29ya2Fyb3VuZCJdCg==", 
                    "pathname": "testdef.yaml", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "MAo=", 
                    "pathname": "return_code", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "IyMjZGVmYXVsdCBwYXJhbWV0ZXJzIGZyb20geWFtbCMjIwpTVUJORVQ9JzEyOC4yMjQnCkRPTUFJTj0nd3JzLmNvbScKIyMjIyMjCiMjI3Rlc3QgcGFyYW1ldGVycyBmcm9tIGpzb24jIyMKIyMjIyMjCnNldCAtZQpleHBvcnQgVEVTVFJVTl9JRD1pcC1zZXR1cApjZCAvbGF2YS1pbnRlbC1pcm9uLXBhc3MtMS90ZXN0cy8yX2lwLXNldHVwClVVSUQ9YGNhdCB1dWlkYAplY2hvICI8TEFWQV9TSUdOQUxfU1RBUlRSVU4gJFRFU1RSVU5fSUQgJFVVSUQ+Igojd2FpdCBmb3IgYW4gYWNrIGZyb20gdGhlIGRpc3BhdGNoZXIKcmVhZApvdnAvbmV0L2lwX3NldHVwLnNoICIkU1VCTkVUIiAiJERPTUFJTiIgImVuYWJsZS13b3JrYXJvdW5kIgplY2hvICI8TEFWQV9TSUdOQUxfRU5EUlVOICRURVNUUlVOX0lEICRVVUlEPiIKI3dhaXQgZm9yIGFuIGFjayBmcm9tIHRoZSBkaXNwYXRjaGVyCnJlYWQK", 
                    "pathname": "run.sh", 
                    "mime_type": "text/plain"
                }
            ], 
            "test_id": "ip-setup", 
            "analyzer_assigned_date": "2016-05-08T00:09:10Z", 
            "test_results": [
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 5, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "ip_config_sanity"
                }
            ], 
            "testdef_metadata": {
                "description": "Share IP addresses and configure /etc/hosts, hostname", 
                "format": "Lava-Test-Shell Test Definition 1.0", 
                "url": "git://ala-git/lava-ovp-test-definitions", 
                "devices": "", 
                "environment": "", 
                "version": "001a356a68146742e14c320c634533a7d61072df", 
                "location": "GIT", 
                "os": ""
            }, 
            "hardware_context": {
                "devices": [
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #0", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #1", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #2", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #3", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #4", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #5", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #6", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #7", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #8", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #9", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #10", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #11", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #12", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #13", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #14", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #15", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #16", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #17", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #18", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #19", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #20", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #21", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #22", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #23", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #24", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #25", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #26", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #27", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #28", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #29", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #30", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #31", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "revision": "?"
                        }, 
                        "description": "GenuineIntel", 
                        "device_type": "device.board"
                    }, 
                    {
                        "description": "132026112 kB of RAM", 
                        "device_type": "device.mem"
                    }
                ]
            }, 
            "analyzer_assigned_uuid": "8ef28382-7734-4c5f-b8cb-11f52745a938", 
            "attributes": {
                "kernel-boot-time": "104.36", 
                "target_group": "c7dd33d2-3e73-414a-b19e-3879fd58bffe", 
                "target": "intel-iron-pass-1", 
                "target.hostname": "intel-iron-pass-1", 
                "target.device_version": "error", 
                "collection": "weekend-benchmarking", 
                "role": "hostB", 
                "build": "8160507", 
                "target.device_type": "vlm-pxe-master", 
                "group_size": "2"
            }, 
            "time_check_performed": false
        }, 
        {
            "software_context": {
                "sources": [
                    {
                        "project_name": "lava-ovp-test-definitions", 
                        "test_params": "", 
                        "branch_url": "git://ala-git/lava-ovp-test-definitions", 
                        "branch_vcs": "git", 
                        "default_params": "{'OVP_DEBUG': ''}", 
                        "branch_revision": "001a356a68146742e14c320c634533a7d61072df"
                    }
                ], 
                "image": {
                    "name": "Wind River Linux 8.0.0.0 \n"
                }, 
                "packages": []
            }, 
            "attachments": [
                {
                    "content": "PExBVkFfU0lHTkFMX1NUQVJUUlVOIG5ldC1zYW5pdHkgNWY2OWRiYmMtNDRiNC00N2NjLWI3MjUtZmE4ODU5YTJiMjY2Pgo8TEFWQV9TSUdOQUxfU1RBUlRUQyBuZXR3b3JrX3Nhbml0eV9ob3N0Pgo8TEFWQV9TSUdOQUxfVEVTVENBU0UgVEVTVF9DQVNFX0lEPW5ldHdvcmtfc2FuZSBSRVNVTFQ9cGFzcz4KZ3JlcDogL2V0Yy9yZXNvbHYuY29uZjogTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeQo8TEFWQV9TSUdOQUxfVEVTVENBU0UgVEVTVF9DQVNFX0lEPXJlc29sdl9jb25mX3NhbmUgUkVTVUxUPWZhaWw+Cndhcm5pbmc6IHJlc29sdi5jb25mIGRvZXMgbm90IGNvbnRhaW4gZXhwZWN0ZWQgc3RyaW5ncwpjYXQ6IC9ldGMvcmVzb2x2LmNvbmY6IE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkKb3ZwL25ldC9uZXRfc2FuaXR5LnNoOiBsaW5lIDQzOiBuc2xvb2t1cDogY29tbWFuZCBub3QgZm91bmQKd2FybmluZzogdHJ5aW5nIHRvIHdvcmthcm91bmQgbGFjayBvZiBuYW1lIHJlc29sdXRpb24KPExBVkFfU0lHTkFMX1RFU1RDQVNFIFRFU1RfQ0FTRV9JRD1uYW1lX3Jlc29sdXRpb25fc2FuaXR5IFJFU1VMVD1mYWlsPgpvdnAvbmV0L25ldF9zYW5pdHkuc2g6IGxpbmUgNDM6IG5zbG9va3VwOiBjb21tYW5kIG5vdCBmb3VuZAo8TEFWQV9TSUdOQUxfVEVTVENBU0UgVEVTVF9DQVNFX0lEPW5hbWVfcmVzb2x1dGlvbiBSRVNVTFQ9ZmFpbD4KPExBVkFfU0lHTkFMX0VORFRDIG5ldHdvcmtfc2FuaXR5X2hvc3Q+CjxMQVZBX1NJR05BTF9URVNUQ0FTRSBURVNUX0NBU0VfSUQ9bmV0d29ya19zYW5pdHlfaG9zdCBSRVNVTFQ9ZmFpbD4KPExBVkFfU0lHTkFMX0VORFJVTiBuZXQtc2FuaXR5IDVmNjlkYmJjLTQ0YjQtNDdjYy1iNzI1LWZhODg1OWEyYjI2Nj4K", 
                    "pathname": "stdout.log", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "bWV0YWRhdGE6CiAgZGVzY3JpcHRpb246IEFkZCB0aGUgTEFWQSBzZXJ2ZXIgSVAgYWRkcmVzcyB0byB0aGUgRFVUJ3MgaG9zdHMgZmlsZSBhbmQgY29uZmlndXJlCiAgICB0aGUgcmVzb2x2LmNvbmYuCiAgZGV2aWNlczogW3ZsbS1weGUtbWFzdGVyXQogIGZvcm1hdDogTGF2YS1UZXN0IFRlc3QgRGVmaW5pdGlvbiAxLjAKICBtYWludGFpbmVyOiBbbWljaGVsLnRoZWJlYXVAd2luZHJpdmVyLmNvbV0KICBuYW1lOiBuZXQtc2FuaXR5CiAgb3M6IFt3cmxdCiAgc2NvcGU6IFtmdW5jdGlvbmFsXQpwYXJhbXM6IHtPVlBfREVCVUc6ICcnfQpwYXJzZToge3BhdHRlcm46ICcoP1A8dGVzdF9jYXNlX2lkPlsgL2EtekEtWjAtOV0rKTogKD9QPHJlc3VsdD5bQS1aXSspJ30KcnVuOgogIHN0ZXBzOiBbZXhwb3J0IE9WUF9ERUJVRywgbGF2YS10ZXN0LWNhc2UgbmV0d29ya19zYW5pdHlfaG9zdCAtLXNoZWxsIG92cC9uZXQvbmV0X3Nhbml0eS5zaF0K", 
                    "pathname": "testdef.yaml", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "MAo=", 
                    "pathname": "return_code", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "IyMjZGVmYXVsdCBwYXJhbWV0ZXJzIGZyb20geWFtbCMjIwpPVlBfREVCVUc9JycKIyMjIyMjCiMjI3Rlc3QgcGFyYW1ldGVycyBmcm9tIGpzb24jIyMKIyMjIyMjCnNldCAtZQpleHBvcnQgVEVTVFJVTl9JRD1uZXQtc2FuaXR5CmNkIC9sYXZhLWludGVsLWlyb24tcGFzcy0xL3Rlc3RzLzBfbmV0LXNhbml0eQpVVUlEPWBjYXQgdXVpZGAKZWNobyAiPExBVkFfU0lHTkFMX1NUQVJUUlVOICRURVNUUlVOX0lEICRVVUlEPiIKI3dhaXQgZm9yIGFuIGFjayBmcm9tIHRoZSBkaXNwYXRjaGVyCnJlYWQKZXhwb3J0IE9WUF9ERUJVRwpsYXZhLXRlc3QtY2FzZSBuZXR3b3JrX3Nhbml0eV9ob3N0IC0tc2hlbGwgb3ZwL25ldC9uZXRfc2FuaXR5LnNoCmVjaG8gIjxMQVZBX1NJR05BTF9FTkRSVU4gJFRFU1RSVU5fSUQgJFVVSUQ+Igojd2FpdCBmb3IgYW4gYWNrIGZyb20gdGhlIGRpc3BhdGNoZXIKcmVhZAo=", 
                    "pathname": "run.sh", 
                    "mime_type": "text/plain"
                }
            ], 
            "test_id": "net-sanity", 
            "analyzer_assigned_date": "2016-05-08T00:09:10Z", 
            "test_results": [
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 3, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "network_sane"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 5, 
                    "result": "fail", 
                    "attributes": {}, 
                    "test_case_id": "resolv_conf_sane"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 10, 
                    "result": "fail", 
                    "attributes": {}, 
                    "test_case_id": "name_resolution_sanity"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 12, 
                    "result": "fail", 
                    "attributes": {}, 
                    "test_case_id": "name_resolution"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 14, 
                    "result": "fail", 
                    "attributes": {}, 
                    "test_case_id": "network_sanity_host"
                }
            ], 
            "testdef_metadata": {
                "description": "Add the LAVA server IP address to the DUT's hosts file and configure the resolv.conf.", 
                "format": "Lava-Test Test Definition 1.0", 
                "url": "git://ala-git/lava-ovp-test-definitions", 
                "devices": "vlm-pxe-master", 
                "environment": "", 
                "version": "001a356a68146742e14c320c634533a7d61072df", 
                "location": "GIT", 
                "os": "wrl"
            }, 
            "hardware_context": {
                "devices": [
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #0", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #1", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #2", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #3", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #4", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #5", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #6", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #7", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #8", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #9", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #10", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #11", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #12", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #13", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #14", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #15", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #16", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #17", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #18", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #19", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #20", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #21", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #22", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #23", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #24", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #25", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #26", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #27", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #28", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #29", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #30", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #31", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "revision": "?"
                        }, 
                        "description": "GenuineIntel", 
                        "device_type": "device.board"
                    }, 
                    {
                        "description": "132026112 kB of RAM", 
                        "device_type": "device.mem"
                    }
                ]
            }, 
            "analyzer_assigned_uuid": "5f69dbbc-44b4-47cc-b725-fa8859a2b266", 
            "attributes": {
                "kernel-boot-time": "104.36", 
                "target_group": "c7dd33d2-3e73-414a-b19e-3879fd58bffe", 
                "target": "intel-iron-pass-1", 
                "target.hostname": "intel-iron-pass-1", 
                "target.device_version": "error", 
                "collection": "weekend-benchmarking", 
                "role": "hostB", 
                "build": "8160507", 
                "target.device_type": "vlm-pxe-master", 
                "group_size": "2"
            }, 
            "time_check_performed": false
        }, 
        {
            "software_context": {
                "sources": [
                    {
                        "project_name": "lava-ovp-test-definitions", 
                        "test_params": "{u'IMAGES_DIR': u'/exports/guest1/', u'BRIDGE': u'br-ovp', u'GUEST_IMAGES_DIR': u'/guest-images'}", 
                        "branch_url": "git://ala-git/lava-ovp-test-definitions", 
                        "branch_vcs": "git", 
                        "default_params": "{'IMAGES_DIR': 'None', 'BRIDGE': 'None', 'GUEST_IMAGES_DIR': 'None'}", 
                        "branch_revision": "001a356a68146742e14c320c634533a7d61072df"
                    }
                ], 
                "image": {
                    "name": "Wind River Linux 8.0.0.0 \n"
                }, 
                "packages": []
            }, 
            "attachments": [
                {
                    "content": "PExBVkFfU0lHTkFMX1NUQVJUUlVOIHNldHVwLW5ldHdvcmsgMDczZjEyOTctMWQ1MS00YzYwLThjMDctZTBmMGMyYjljNzg1Pgo8TEFWQV9NVUxUSV9OT0RFPiA8TEFWQV9TWU5DIG5mc19zZXR1cD4KPExBVkFfU0lHTkFMX1NUQVJUVEMgc2V0dXBfYnJpZGdlPgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpEZWxldGUgdGhlIElQIG9mIGFjdGl2ZSBldGgsIHRoaXMgSVAgd2lsbCBiZSBzZXQgb24gc3dpdGNoCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCkFkZCBJUCAxMjguMjI0LjE0OS4xNDcgdG8gc3dpdGNoIGJyLW92cAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KQWRkIGRlZmF1bHQgZ3cgMTI4LjIyNC4xNDkuMSB0byBzd2l0Y2ggYnItb3ZwCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpBZGQgcG9ydCBldGgxIHRvIGJyLW92cAo8TEFWQV9TSUdOQUxfRU5EVEMgc2V0dXBfYnJpZGdlPgo8TEFWQV9TSUdOQUxfVEVTVENBU0UgVEVTVF9DQVNFX0lEPXNldHVwX2JyaWRnZSBSRVNVTFQ9cGFzcz4KPExBVkFfU0lHTkFMX1NUQVJUVEMgc2V0dXBfbmZzX3Bvb2w+ClBvb2wgbmZzX3Bvb2wgZGVmaW5lZCBmcm9tIG5mc19wb29sLnhtbAoKUG9vbCBuZnNfcG9vbCBzdGFydGVkCgo8TEFWQV9TSUdOQUxfRU5EVEMgc2V0dXBfbmZzX3Bvb2w+CjxMQVZBX1NJR05BTF9URVNUQ0FTRSBURVNUX0NBU0VfSUQ9c2V0dXBfbmZzX3Bvb2wgUkVTVUxUPXBhc3M+CjxMQVZBX1NJR05BTF9FTkRSVU4gc2V0dXAtbmV0d29yayAwNzNmMTI5Ny0xZDUxLTRjNjAtOGMwNy1lMGYwYzJiOWM3ODU+Cg==", 
                    "pathname": "stdout.log", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "bWV0YWRhdGE6IHtkZXNjcmlwdGlvbjogU2V0dXAgYnJpZGdlIGFuZCBuZnMgbmVlZGVkIGZvciB0ZXN0aW5nLCBmb3JtYXQ6IExhdmEtVGVzdC1TaGVsbAogICAgVGVzdCBEZWZpbml0aW9uIDEuMCwgbmFtZTogc2V0dXAtbmV0d29ya30KcGFyYW1zOiB7QlJJREdFOiBOb25lLCBHVUVTVF9JTUFHRVNfRElSOiBOb25lLCBJTUFHRVNfRElSOiBOb25lfQpydW46CiAgc3RlcHM6IFtsYXZhLXN5bmMgbmZzX3NldHVwLCBsYXZhLXRlc3QtY2FzZSBzZXR1cF9icmlkZ2UgLS1zaGVsbCBvdnAvbmV0L3NldHVwX2JyaWRnZS5zaAogICAgICAkQlJJREdFLCBwcmltYXJ5PSQobGF2YS1ncm91cCBob3N0QSksIHNlY29uZGFyeT0kKGxhdmEtZ3JvdXAgaG9zdEIpLCAnaWYgWyAkKGxhdmEtcm9sZSkKICAgICAgPSAiaG9zdEEiIF07IHRoZW4gaG9zdG5hbWUgJHByaW1hcnk7IGVsc2UgaG9zdG5hbWUgJHNlY29uZGFyeTsgZmknLCBsYXZhLXRlc3QtY2FzZQogICAgICBzZXR1cF9uZnNfcG9vbCAtLXNoZWxsIG92cC9uZXQvc2V0dXBfbmZzX3Bvb2wuc2ggLWggJHByaW1hcnkgLWQgIiRJTUFHRVNfRElSIgogICAgICAtbSAiJEdVRVNUX0lNQUdFU19ESVIiXQo=", 
                    "pathname": "testdef.yaml", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "MAo=", 
                    "pathname": "return_code", 
                    "mime_type": "text/plain"
                }, 
                {
                    "content": "IyMjZGVmYXVsdCBwYXJhbWV0ZXJzIGZyb20geWFtbCMjIwpJTUFHRVNfRElSPSdOb25lJwpCUklER0U9J05vbmUnCkdVRVNUX0lNQUdFU19ESVI9J05vbmUnCiMjIyMjIwojIyN0ZXN0IHBhcmFtZXRlcnMgZnJvbSBqc29uIyMjCklNQUdFU19ESVI9Jy9leHBvcnRzL2d1ZXN0MS8nCkJSSURHRT0nYnItb3ZwJwpHVUVTVF9JTUFHRVNfRElSPScvZ3Vlc3QtaW1hZ2VzJwojIyMjIyMKc2V0IC1lCmV4cG9ydCBURVNUUlVOX0lEPXNldHVwLW5ldHdvcmsKY2QgL2xhdmEtaW50ZWwtaXJvbi1wYXNzLTEvdGVzdHMvM19zZXR1cC1uZXR3b3JrClVVSUQ9YGNhdCB1dWlkYAplY2hvICI8TEFWQV9TSUdOQUxfU1RBUlRSVU4gJFRFU1RSVU5fSUQgJFVVSUQ+Igojd2FpdCBmb3IgYW4gYWNrIGZyb20gdGhlIGRpc3BhdGNoZXIKcmVhZApsYXZhLXN5bmMgbmZzX3NldHVwCmxhdmEtdGVzdC1jYXNlIHNldHVwX2JyaWRnZSAtLXNoZWxsIG92cC9uZXQvc2V0dXBfYnJpZGdlLnNoICRCUklER0UKcHJpbWFyeT0kKGxhdmEtZ3JvdXAgaG9zdEEpCnNlY29uZGFyeT0kKGxhdmEtZ3JvdXAgaG9zdEIpCmlmIFsgJChsYXZhLXJvbGUpID0gImhvc3RBIiBdOyB0aGVuIGhvc3RuYW1lICRwcmltYXJ5OyBlbHNlIGhvc3RuYW1lICRzZWNvbmRhcnk7IGZpCmxhdmEtdGVzdC1jYXNlIHNldHVwX25mc19wb29sIC0tc2hlbGwgb3ZwL25ldC9zZXR1cF9uZnNfcG9vbC5zaCAtaCAkcHJpbWFyeSAtZCAiJElNQUdFU19ESVIiIC1tICIkR1VFU1RfSU1BR0VTX0RJUiIKZWNobyAiPExBVkFfU0lHTkFMX0VORFJVTiAkVEVTVFJVTl9JRCAkVVVJRD4iCiN3YWl0IGZvciBhbiBhY2sgZnJvbSB0aGUgZGlzcGF0Y2hlcgpyZWFkCg==", 
                    "pathname": "run.sh", 
                    "mime_type": "text/plain"
                }
            ], 
            "test_id": "setup-network", 
            "analyzer_assigned_date": "2016-05-08T00:09:10Z", 
            "test_results": [
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 13, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "setup_bridge"
                }, 
                {
                    "attachments": [], 
                    "log_filename": "stdout.log", 
                    "log_lineno": 20, 
                    "result": "pass", 
                    "attributes": {}, 
                    "test_case_id": "setup_nfs_pool"
                }
            ], 
            "testdef_metadata": {
                "description": "Setup bridge and nfs needed for testing", 
                "format": "Lava-Test-Shell Test Definition 1.0", 
                "url": "git://ala-git/lava-ovp-test-definitions", 
                "devices": "", 
                "environment": "", 
                "version": "001a356a68146742e14c320c634533a7d61072df", 
                "location": "GIT", 
                "os": ""
            }, 
            "hardware_context": {
                "devices": [
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #0", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #1", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #2", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #3", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #4", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #5", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #6", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #7", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #8", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #9", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #10", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #11", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #12", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #13", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #14", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #15", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #16", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #17", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #18", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #19", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #20", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #21", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #22", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #23", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #24", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #25", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #26", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #27", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #28", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #29", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #30", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "cpu cores": "8", 
                            "bogomips": "5792.65", 
                            "core id": "7", 
                            "apicid": "47", 
                            "fpu_exception": "yes", 
                            "stepping": "7", 
                            "cache_alignment": "64", 
                            "clflush size": "64", 
                            "microcode": "0x710", 
                            "cpu MHz": "1429.496", 
                            "cache size": "20480 KB", 
                            "cpuid level": "13", 
                            "fpu": "yes", 
                            "siblings": "16", 
                            "physical id": "1", 
                            "address sizes": "46 bits physical, 48 bits virtual", 
                            "cpu family": "6", 
                            "wp": "yes", 
                            "power management": "", 
                            "bugs": "", 
                            "flags": "fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb pln pts dtherm tpr_shadow vnmi flexpriority ept vpid xsaveopt", 
                            "cpu_type": "Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz", 
                            "model": "45", 
                            "initial apicid": "47"
                        }, 
                        "description": "Processor #31", 
                        "device_type": "device.cpu"
                    }, 
                    {
                        "attributes": {
                            "revision": "?"
                        }, 
                        "description": "GenuineIntel", 
                        "device_type": "device.board"
                    }, 
                    {
                        "description": "132026112 kB of RAM", 
                        "device_type": "device.mem"
                    }
                ]
            }, 
            "analyzer_assigned_uuid": "073f1297-1d51-4c60-8c07-e0f0c2b9c785", 
            "attributes": {
                "kernel-boot-time": "104.36", 
                "target_group": "c7dd33d2-3e73-414a-b19e-3879fd58bffe", 
                "target": "intel-iron-pass-1", 
                "target.hostname": "intel-iron-pass-1", 
                "target.device_version": "error", 
                "collection": "weekend-benchmarking", 
                "role": "hostB", 
                "build": "8160507", 
                "target.device_type": "vlm-pxe-master", 
                "group_size": "2"
            }, 
            "time_check_performed": false
        }, 
        {
            "attachments": [], 
            "tags": [], 
            "analyzer_assigned_date": "2016-05-07T20:00:57Z", 
            "time_check_performed": false, 
            "test_results": [
                {
                    "message": "", 
                    "test_case_id": "deploy_linaro_kernel", 
                    "result": "pass"
                }, 
                {
                    "message": "", 
                    "test_case_id": "lava_test_shell", 
                    "result": "pass"
                }, 
                {
                    "message": "", 
                    "test_case_id": "gather_results", 
                    "result": "pass"
                }, 
                {
                    "message": "", 
                    "test_case_id": "job_complete", 
                    "result": "pass"
                }
            ], 
            "analyzer_assigned_uuid": "69d8b64a-148e-11e6-a057-f8b156ac4595", 
            "attributes": {
                "kernel-boot-time": "104.36", 
                "target_group": "c7dd33d2-3e73-414a-b19e-3879fd58bffe", 
                "target": "intel-iron-pass-1", 
                "target.hostname": "intel-iron-pass-1", 
                "target.device_version": "error", 
                "collection": "weekend-benchmarking", 
                "role": "hostB", 
                "build": "8160507", 
                "target.device_type": "vlm-pxe-master", 
                "group_size": "2"
            }, 
            "test_id": "lava"
        }
    ], 
    "format": "Dashboard Bundle Format 1.7"
}
<type 'dict'>
