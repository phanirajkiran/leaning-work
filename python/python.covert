with open('C:/path/numbers.txt') as f:
    lines = f.read().splitlines()

from collections import Counter
>>> L=['a','b','a','b','a']
>>> a = Counter(L)
>>> print a
Counter({'a': 3, 'b': 2})
>>> a['a']
3


>>> a=[['x',2],['y',4],['z',5]]
>>> b=dict(a)
>>> print b
{'y': 4, 'x': 2, 'z': 5}




list search 
http://www.cademuir.eu/blog/2011/10/20/python-searching-for-a-string-within-a-list-list-comprehension/
>>> x=['[Test_Config]', 'TIMEOUT=4500', 'AUTO=yeS', 'SOURCE=RCA', 'TYPE=function']
>>> [m.group(0) for l in x for m in [regex.search(l)] if m ]
[]
>>> regex=re.compile("(AUTO.*=.*yes)",re.IGNORECASE)
>>> [m.group(0) for l in x for m in [regex.search(l)] if m ]
['AUTO=yeS']
>>> 



>>> open("myfile.txt").readlines()
>>> lines = open("myfile.txt").readlines()
>>> lines
['1000\n', '2000\n', '3000\n', '4000\n']


dictionary = {}
for section in config.sections():
    dictionary[section] = {}
    for option in config.options(section):
        dictionary[section][option] = config.get(section, option)


''.join list to line 


d = {'a' : 1, 'b' : 2, 'c' : 3}
d.values()

Output:

We will get output as list

[1, 3, 2]
========================================
d.keys()

Output:

We will get output as list

[‘a’, ‘c’, ‘b’]


	

dict1 = {'1.2': [1,2,3], '2.2': [4,5,6], '3.3': [7,8,9]}

print {k:sum(v) for k,v in dict1.items()}

>>> [1, 2, 3, 4, 1, 4, 1].count(1)
3


	

And, just to throw it in the mix, is the oft-forgotten str.translate:

from string import digits
'abc123def456ghi789zero0'.translate(None, digits)
# 'abcdefghizero'

Here's another

    import string  
    fieldValue = "ML-26588-12-a"  
    stripChars = fieldValue.translate(None, string.digits)  
    fieldValue = fieldValue.translate(None, stripChars)  
    print stripChars  
    print fieldValue  

prints:

    ML---a  
    2658812  


s = s.replace('M','')

a[0] a[-1] 


http://zetcode.com/lang/python/strings/
>>> nums = "1,5,6,8,2,3,1,9"
>>> nums.split(',')
['1', '5', '6', '8', '2', '3', '1', '9']
>>> '\n'.join(nums.split(','))
'1\n5\n6\n8\n2\n3\n1\n9'


>>> s = "1 + 2 + 3 = 6"
>>> a = s.partition("=")
>>> print a 
('1 + 2 + 3 ', '=', ' 6')


>>> a = "ZetCode"
>>> print a.upper()
ZETCODE
>>> print a.lower()
zetcode
>>> print a.swapcase()
zETcODE
>>> print a.title() 
Zetcode

#list insert
a.insert(0,'xx')
list.append("xx")

#!/usr/bin/python

# strnum.py

print int("12") + 12
print "There are " + str(22) + " oranges."
print float('22.33') + 22.55



>>> a = "I saw a wolf in the forest. A lonely wolf."
>>> print a.replace("wolf", "fox")
I saw a fox in the forest. A lonely fox.
>>> print  a.replace("wolf", "fox", 1)
I saw a fox in the forest. A lonely wolf.


http://wangwei007.blog.51cto.com/68019/1100742


a = [5,2,1,9,6]        
 
>>> sorted(a)                  #将a从小到大排序,不影响a本身结构 
[1, 2, 5, 6, 9] 
 
>>> sorted(a,reverse = True)   #将a从大到小排序,不影响a本身结构 
[9, 6, 5, 2, 1] 
 
>>> a.sort()                   #将a从小到大排序,影响a本身结构 
>>> a 
[1, 2, 5, 6, 9] 
 
>>> a.sort(reverse = True)     #将a从大到小排序,影响a本身结构 
>>> a 
[9, 6, 5, 2, 1] 


注意，a.sort() 已改变其结构，b = a.sort() 是错误的写法! 

>>> b = ['aa','BB','bb','zz','CC'] 
>>> sorted(b) 
['BB', 'CC', 'aa', 'bb', 'zz']    #按列表中元素每个字母的ascii码从小到大排序,如果要从大到小,请用sorted(b,reverse=True)下同 
 
>>> c =['CCC', 'bb', 'ffff', 'z']  
>>> sorted(c,key=len)             #按列表的元素的长度排序 
['z', 'bb', 'CCC', 'ffff'] 
 
>>> d =['CCC', 'bb', 'ffff', 'z'] 
>>> sorted(d,key = str.lower )    #将列表中的每个元素变为小写，再按每个元素中的每个字母的ascii码从小到大排序 
['bb', 'CCC', 'ffff', 'z'] 
 
>>> def lastchar(s): 
       return s[-1] 
>>> e = ['abc','b','AAz','ef'] 
>>> sorted(e,key = lastchar)      #自定义函数排序,lastchar为函数名，这个函数返回列表e中每个元素的最后一个字母 
['b', 'abc', 'ef', 'AAz']         #sorted(e,key=lastchar)作用就是 按列表e中每个元素的最后一个字母的ascii码从小到大排序 
 
>>> f = [{'name':'abc','age':20},{'name':'def','age':30},{'name':'ghi','age':25}]     #列表中的元素为字典 
>>> def age(s): 
       return s['age'] 
>>> ff = sorted(f,key = age)      #自定义函数按列表f中字典的age从小到大排序  
 
[{'age': 20, 'name': 'abc'}, {'age': 25, 'name': 'ghi'}, {'age': 30, 'name': 'def'}] 
 
>>> f2 = sorted(f,key = lambda x:x['age'])    #如果觉得上面定义一个函数代码不美观，可以用lambda的形式来定义函数,效果同上


>>> a = [3,4,5,6]
>>> for i, val in enumerate(a):
...     print i, val



>>> a = [51,27,13,56]
>>> enumerate(a)
<enumerate object at 0x7f29c60b47d0>
>>> list(enumerate(a))
[(0, 51), (1, 27), (2, 13), (3, 56)]

a = [51,27,13,56]
dict(enumerate(a))

{0: 51, 1: 27, 2: 13, 3: 56}
enumerate(sequence, start=0)
>>> a = [51,27,13,56]
>>> dict(enumerate(a))
{0: 51, 1: 27, 2: 13, 3: 56}
>>> dict(enumerate(a,start=3))
{3: 51, 4: 27, 5: 13, 6: 56}


>>> somelist = list(enumerate( 'Sun Mon Tue Wed Thu Fri Sat'.split(), 1))
>>> 
>>> print somelist
[(1, 'Sun'), (2, 'Mon'), (3, 'Tue'), (4, 'Wed'), (5, 'Thu'), (6, 'Fri'), (7, 'Sat')]



for x in a[:]:
    if x < 0: a.remove(x)

http://stackoverflow.com/questions/1207406/remove-items-from-a-list-while-iterating-in-python/1207461#1207461
somelist[:] = [x for x in somelist if not determine(x)]
>>> x = [1, 2, 3, 4, 2, 2, 3]
>>> x[:] = (value for value in x if value != 3)


great:
http://stackoverflow.com/questions/24410211/remove-single-characters-from-list?lq=1

>>> line = ['word','a','b','c','d','e','f','g']
>>> line = [i for i in line if len(i) > 1]
>>> print line 
['word']


great
http://stackoverflow.com/questions/18506585/how-to-remove-all-spaces-in-the-strings-in-list?lq=1
>>> mylist=[ " ","abc","bgt","llko","    ","hhyt","  ","      ","iuyt"]
>>> new_list = [elem for elem in mylist if elem.strip() ]
>>> print new_list
['abc', 'bgt', 'llko', 'hhyt', 'iuyt']

def delete_value(s,x)
    s[:] = (value for value in x if value != %s %x) 


>>> a = [-1,-2,3,5,-8]
>>> for x in a[:]:
...     if x < 0: a.remove(x)
... 
>>> print a
[3, 5]


>>> from collections import Counter
>>> L=['a','b','a','b','a']
>>> a = Counter(L)
>>> print a
Counter({'a': 3, 'b': 2})
>>> a['a']
3



str1 = "Hello"
str2 = "World"
newstr = " ".join((str1, str2)

#string to list 
states.split()

#list to string
list1 = ['1', '2', '3']
str1 = ''.join(list1)


covert file to dict
d = {}
with open("file.txt") as f:
    for line in f:
       (key, val) = line.split()
       d[int(key)] = val

covert dict to file
and use it 
import pickle

a = {'hello': 'world'}

with open('filename.pickle', 'wb') as handle:
  pickle.dump(a, handle)

with open('filename.pickle', 'rb') as handle:
  b = pickle.load(handle)

print a == b
or https://wiki.python.org/moin/UsingPickle


l = []
l.append('foo')
l.append('bar')
l.append('baz')

s = ''.join(l)
