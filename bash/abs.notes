# the pro bash
http://uod.ac/it/wp-content/uploads/2011/04/Pro-Bash-Programming-Scripting-the-GNU-Linux-Shell-Expert-039-s-Voice-in-Linux.pdf
http://www.blogjava.net/tinysun/archive/2010/09/30/333468.html
http://www.cnblogs.com/ebusi/archive/2011/02/09/1950422.html
路径:
LOG_DIR=/var/log
if [ `pwd` != "$LOG_DIR" ]  # or   if [ "$PWD" != "$LOG_DIR" ]
# Far more efficient is:
#
# cd /var/log || {
#   echo "Cannot change to necessary directory." >&2
#   exit $E_XCD;
# }

bash$ echo $(ls -l)
total 8 -rw-rw-r-- 1 bo bo 13 Aug 21 12:57 t.sh -rw-rw-r-- 1 bo bo 78 Aug 21 12:57 u.sh


bash$ echo "$(ls -l)"
total 8
 -rw-rw-r--  1 bo bo  13 Aug 21 12:57 t.sh
 -rw-rw-r--  1 bo bo  78 Aug 21 12:57 u.sh
 
echo ${#stringZ} 

http://tldp.org/LDP/abs/html/parameter-substitution.html
NOTE: # % only support the [0-9] [a-zA-Z] and * others is not support as far as I know
${var#Pattern} Remove from $var the shortest part of $Pattern that matches the front end of $var.
${var##Pattern} Remove from $var the longest part of $Pattern that matches the front end of $var.
	echo "${filename##*.}"      # Extension of filename.
	echo "${PWD##*/}"           # Basename of current working directory.
	echo "${0##*/}"             # Name of script.

 


${var%Pattern} Remove from $var the shortest part of $Pattern that matches the back end of $var. 
${var%%Pattern} Remove from $var the longest part of $Pattern that matches the back end of $var. 




stringZ=abcABC123ABCabc
#       |----|          shortest
#       |----------|    longest

echo ${stringZ#a*C}      # 123ABCabc
# Strip out shortest match between 'a' and 'C'.

echo ${stringZ##a*C}     # abc
# Strip out longest match between 'a' and 'C'.

${var/Pattern/Replacement} First match of Pattern, within var replaced with Replacement.
b=${a/23/BB}             # Substitute "BB" for "23".

${var//Pattern/Replacement} Global replacement. All matches of Pattern, within var replaced with Replacement.


${#string}
expr length $string

${string:position:length}
Extracts $length characters of substring from $string at $position.

echo ${stringZ:0}                            # abcABC123ABCabc
echo ${stringZ:1}                            # bcABC123ABCabc
echo ${stringZ:7}                            # 23ABCabc

http://tldp.org/LDP/abs/html/string-manipulation.html#EXPRPAREN
Extracts $substring at beginning of $string, where $substring is a regular expression
stringZ=abcABC123ABCabc
#       =======	    

echo `expr match "$stringZ" '\(.[b-c]*[A-Z]..[0-9]\)'`   # abcABC1






lyang0@lyang0-OptiPlex-755:~/WORK/git2$ a="x~back end~20120801.TXT 2KB"
lyang0@lyang0-OptiPlex-755:~/WORK/git2$ echo ${a% *}
x~back end~20120801.TXT
lyang0@lyang0-OptiPlex-755:~/WORK/git2$ echo ${a##* }
2KB

lyang0@lyang0-OptiPlex-755:~/WORK/git2$ a="sda36"
lyang0@lyang0-OptiPlex-755:~/WORK/git2$ echo ${a##sda}
36

while read -r line; do
  file=${line% *}
  size=${line##* }
  array+=( "$file" )
  printf '%s' "$file"
  ...
done


 echo "Length of var01 = ${#var01}"
 For an array, ${#array[*]} and ${#array[@]} give the number of elements in the array.
 echo "${PWD##*/}" PWD钱不用${}
 
 替换
 ${var/Pattern/Replacement}
First match of Pattern, within var replaced with Replacement.

If Replacement is omitted, then the first match of Pattern is replaced by nothing, that is, deleted.
c=BB34
echo "c = $c"            # c = BB34
d=${c/BB/23}             # Substitute "23" for "BB".



echo '$hello'  # $hello
hello="A B  C   D"
echo $hello   # A B C D
echo "$hello" # A B  C   D
if [ -z "$unassigned" ]
then
  echo "\$unassigned is NULL."
fi     # $unassigned is NULL.
echo "The value of \"a\" is now $a."

bash$ echo -e x\ty
xty
bash$ echo -e "x\ty"
x       y

===================================================
算术:
http://tldp.org/LDP/abs/html/arithexp.html
# Assignment using 'let'
let a=16+5
let "a += 1"
let "index = $index + 1"

((a += 1))             # let "a+=1"
a=$(($a+1))

z=$(($z+3))
z=$((z+3))                                  #  Also correct
  (( n += 1 ))                              # Increment.
a=`expr 5 % 3`

a=`ls -l`
R=$(cat /etc/redhat-release)
arch=$(uname -m)

if [ -n "${10}" ]  # Parameters > $9 must be enclosed in {brackets}.
args=$#           # Number of args passed.

var="'(]\\{}\$\""
echo $var        # '(]\{}$"
IFS='\'
echo $var        # '(] {}$"     \ converted to space. Why?
echo "$var"      # '(]\{}$"



流控:
case `basename $0` in    # Or:    case ${0##*/} in
    "wh"       ) whois $1@whois.tucows.com;;
    "wh-ripe"  ) whois $1@whois.ripe.net;;
    "wh-apnic" ) whois $1@whois.apnic.net;;
    "wh-cw"    ) whois $1@whois.cw.net;;
    *          ) echo "Usage: `basename $0` [domain-name]";;
esac 

case "$variable" in 
 
 
  case "$1" in
    -d|--debug)

case $( arch ) in   # $( arch ) returns machine architecture.
                    # Equivalent to 'uname -m' ...
  i386 ) echo "80386-based machine";;
  i486 ) echo "80486-based machine";;
  i586 ) echo "Pentium-based machine";;
  i686 ) echo "Pentium2+-based machine";;
  *    ) echo "Other type of machine";;
esac

exit 0
==========================================
List="one two three"
for a in $List     # Splits the variable in parts at whitespace.
do
  echo "$a"
done

NUMBERS="9 7 3 8 37.53"

for number in `echo $NUMBERS`  # for number in 9 7 3 8 37.53


for planet in "Mercury 36" "Venus 67" "Earth 93"  "Mars 142" "Jupiter 483"

for file in *



for file in $( find $directory -type f -name '*' | sort )


generate_list ()
{
  echo "one two three"
}

for word in $(generate_list)  # Let "word" grab output of function.
do
  echo "$word"
done

for a in `seq 10`
for a in {1..10}

LIMIT=10
for ((a=1; a <= LIMIT ; a++))  # Double parentheses, and naked "LIMIT"

for file in [jx]*

for name in $(awk 'BEGIN{FS=":"}{print $1}' < "$PASSWORD_FILE" )
===============================================================
while [ "$var0" -lt "$LIMIT" ]

while read line   # As long as there is another line to read ...
do
  ...
done <"$datafile"

while true

while :; do cat /proc/irq/*/smp_affinity ; sleep 10;done
============================================================================================================
let "num = (( 200 || 11 ))"
echo $num   # 1

=========================
if [ $xyz ]   # Tests if $xyz is null, but...
              # it's only an uninitialized variable.
then
  echo "Uninitialized variable is true."
else
  echo "Uninitialized variable is false."
  
if [ -x "$filename" ]; then

if [[ -e $file ]]
Using the [[ ... ]] test construct, rather than [ ... ] can prevent many logic errors in scripts. For example, the &&, ||, <, and > operators work within a [[ ]] test, despite giving an error within a [ ] construct.


The "if COMMAND" construct returns the exit status of COMMAND.
if cd "$dir" 2>/dev/null; then 

var1=20
var2=22
[ "$var1" -ne "$var2" ] && echo "$var1 is not equal to $var2"

fi            # Uninitialized variable is false.

# (( ... )) also useful in an if-then test.

var1=5
var2=4

if (( var1 > var2 ))
then #^      ^      Note: Not $var1, $var2. Why?
  echo "$var1 is greater than $var2"
fi     # 5 is greater than 4

exit 0

a=3

if [ "$a" -gt 0 ]
then
  if [ "$a" -lt 5 ]
  then
    echo "The value of \"a\" lies somewhere between 0 and 5."
  fi
fi

# Same result as:

if [ "$a" -gt 0 ] && [ "$a" -lt 5 ]
then
  echo "The value of \"a\" lies somewhere between 0 and 5."
fi

 if [[ "$inner" -eq 7 && "$outer" = "III" ]]

文件判断

http://tldp.org/LDP/abs/html/fto.html

比较判断

http://tldp.org/LDP/abs/html/comparison-ops.html
http://tldp.org/LDP/abs/html/opprecedence.html

====================================================================================================================
数组http://tldp.org/LDP/abs/html/arrays.html#EX66
area2=( zero one two three four )

echo -n "area2[0] = "
echo ${area2[0]}
area3=([17]=seventeen [24]=twenty-four)
echo ${area3[24]}

# Doing it with a "for" loop instead:
#   for i in "${colors[@]}"
#   do
#     echo "$i"
#   done
# (Thanks, S.C.)

=========================
http://stackoverflow.com/questions/229551/string-contains-in-bash
http://stackoverflow.com/questions/2829613/how-do-you-tell-if-a-string-contains-another-string-in-unix-shell-scripting


[ $? -eq 0 ] && echo "pass" || echo "fail"

Arithmetic Expansion

z=$(($z+3))
z=$((z+3)) 
let z=z+3

grep regex

lyang0@lyang0-OptiPlex-755:~/del$ echo a111b | grep -E 'a1+b' (=egrep)
a111b
lyang0@lyang0-OptiPlex-755:~/del$ echo a111b | grep 'a1\+b'
a111b

lyang0@lyang0-OptiPlex-755:~/del$ echo "read" |egrep 're(a|e)d' 
read
lyang0@lyang0-OptiPlex-755:~/del$ echo "read" |egrep 're[ae]d' 
read
lyang0@lyang0-OptiPlex-755:~/del$ echo "reed" |egrep 're[ae]d' 
reed

#Globbing
bash$ ls -l [ab]*
-rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 a.1
 -rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 b.1

bash$ ls -l [a-c]*
-rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 a.1
 -rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 b.1
 -rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 c.1

bash$ ls -l {b*,c*,*est*}
-rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 b.1
 -rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 c.1
 -rw-rw-r--    1 bozo  bozo       758 Jul 30 09:02 test1.txt

for file in [jx]*

if [[ $mail =~ "^From " ]]   # Match "From" field in message.

#Here documents are a special case of redirected code blocks. That being the case, it should be possible to feed the output of a here document into the stdin for a while loop.
#
#
#

function doesOutput()
 # Could be an external command too, of course.
 # Here we show you can use a function as well.
{
  ls -al *.jpg | awk '{print $5,$9}'
}


nr=0          #  We want the while loop to be able to manipulate these and
totalSize=0   #+ to be able to see the changes after the 'while' finished.

while read fileSize fileName ; do
  echo "$fileName is $fileSize bytes"
  let nr++
  totalSize=$((totalSize+fileSize))   # Or: "let totalSize+=fileSize"
done<<EOF
$(doesOutput)
EOF




find ... | while read LINE
do
...
done

#If you need to use the same results more than once, you could save find's output into a temporary file and read from that.
while read LINE
do
...
done < /tmp/filename


#Endless loop:

while [ 1 ]   # Endless loop.

while :
do
   operation-1
   operation-2
   ...
   operation-n
done

# Gives difference in command output
lyang0@lyang0-OptiPlex-755:~/del$ diff -u <(ls) <(ls -lrt)
[lyang0@pek-lpgbuild9 lb08a_12sp]$ diff <(ls wrlinux-5/) <(ls /buildarea1/lyang0/wrlinux-x/)
2c2
< docs
---
> Documentation
5d4
< package.properties


#read
while read  des what mask iface; do
  echo $des $what $mask $iface
done < <(route -n) 

[ ! -f "$file" ] || (rm -f $file; echo "File \"$file\" deleted.")



#  Cleans up the temp file if script interrupted by control-c.
trap 'rm -f $TEMPFILE; exit $USER_INTERRUPT' TERM INT

# trap '' SIGNAL (two adjacent apostrophes) disables SIGNAL for the remainder of the script. trap SIGNAL restores the functioning of SIGNAL once more. This is useful to protect a critical portion of a script from an undesirable interrupt.
 

	trap '' 2  # Signal 2 is Control-C, now disabled.
	command
	command
	command
	trap 2     # Reenables Control-C

###cat
###
##
cat <<End-of-message
-------------------------------------
This is line 1 of the message.
This is line 2 of the message.
This is line 3 of the message.
This is line 4 of the message.
This is the last line of the message.
-------------------------------------
End-of-message

#  Replacing line 7, above, with
#+   cat > $Newfile <<End-of-message

#set
set -- a b
echo $1
echo $2


find /path/to/base -type d | while read LINE
do
        set -- $(ls -S "$LINE"/*.gz)
        [ "$#" -eq 2 ] || continue # Ignore folders that don't have 2 files

        echo "Keeping $1"
        echo rm "$2"
done

#ls -S sorts by file size. The largest one comes first.

shopt -s extglob #open
shopt -u extglob #close
rm *@(jpg|png) #delete the end with jpg or png

ls -l !(*.*)
ls -l -d !(*.*)

#for cat EOF
1、追加文件

cat << EOF >> test.sh
something 
EOF
2、换一种写法

cat > test.sh << EOF
something 
EOF
2最好

#generate the series
lyang0@lyang0-OptiPlex-755:~/community/leaning-work$ echo {A..Z..2}
A C E G I K M O Q S U W Y
lyang0@lyang0-OptiPlex-755:~/community/leaning-work$ echo {1..20..2}
1 3 5 7 9 11 13 15 17 19


#if
if [[ "$inner" -eq 7 && "$outer" = "III" ]]
if [[ `echo -n "$1" | wc -c` -eq 1 ]];
if [ "$a" -gt 0 ] && [ "$a" -lt 5 ]
if grep -q "vmx" /proc/cpuinfo && zcat /proc/config.gz |grep -q CONFIG_KVM=m;then
if [[ `grep used file` = "" ]]
[[ `zcat /proc/config.gz |grep KVM` != "" ]] && [[ `grep  "vmx" /proc/cpuinfo` != "" ]] && echo "hello"  在这个里面的不会输出的 哈哈 

root@x86-64-kvm-guest:/opt/benchmark/kvm/netperf# ./xx.sh 
./xx.sh: line 2: [: too many arguments
root@x86-64-kvm-guest:/opt/benchmark/kvm/netperf# cat ./xx.sh
#!/bin/bash
[ `zcat /proc/config.gz |grep KVM` != "" ] && [ `grep  "vmx" /proc/cpuinfo` != "" ] && echo "hello" 
[ $? = 1 ] && { echo "the guest is not up";exit; } #{ }别忘了空格, 如果一行的话最后一个;别忘了
$0 the script's name



参数
http://stackoverflow.com/questions/5474732/how-can-i-add-a-help-method-to-a-shell-script

usage="$(basename $0) [-h] [-s n] -- program to calculate the answer to life, the universe and everything

where:
    -h  show this help text
    -s  set the seed value (default: 42)"

seed=42
while getopts ':hs:' option; do
  case "$option" in
    h) echo "$usage"
       exit
       ;;
    s) seed=$OPTARG
       ;;
    ?) printf "illegal option: '%s'\n" "$OPTARG" >&2
       echo "$usage" >&2
       exit 1
       ;;
  esac
done
shift $((OPTIND - 1))

[lyang0@pek-lpgbuild8 ~]$ aa=/folk/lyang0/yose*
[lyang0@pek-lpgbuild8 ~]$ [[ -f `echo $aa` ]] && echo hello
hello
http://stackoverflow.com/questions/2630799/how-can-i-check-if-file-exists-using-patterns


#ternary operator
lyang0@lyang0-OptiPlex-755:~$ a=3
lyang0@lyang0-OptiPlex-755:~$ b=4
lyang0@lyang0-OptiPlex-755:~$ c=$((a>b?a:b))
lyang0@lyang0-OptiPlex-755:~$ echo $c
4
plus a tip, the <condition>?<statement>:<statement> contruction is called the ternary operator, which should make it easier to search for
