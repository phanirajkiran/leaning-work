
FILE
The path to the .bb file which is currently being processed.


FILESPATH
The default set of directories which are available to use for the file:// URI’s. Each directory is
searched, in the specified order, in an attempt to find the file specified by each file:// URI:
FILESPATH = "${FILE_DIRNAME}/${PF}:${FILE_DIRNAME}/${P}:\
${FILE_DIRNAME}/${PN}:${FILE_DIRNAME}/files:${FILE_DIRNAME}"

FILESDIR
The default directory to search for file:// URI’s. Only used if the file is not found in FILESPATH.
This can be used to easily add one additional directory to the search path without having to modify
the default FILESPATH setting. By default this is just the first directory from FILESPATH.
FILESDIR = "${@bb.which(bb.data.getVar(’FILESPATH’, d, 1), ’.’)}"


So we define a new package and instruct bitbake to include /usr/bin/test in it.
FILES-${PN}-test = "${bindir}/test"
PACKAGES += "FILES-${PN}-test"

For variable assignments python code is indicated via the use of ${@...}, as shown in the following
example:
TAG = ${@bb.data.getVar(’PV’,d,1).replace(’.’, ’_’)}

RREPLACES
Used to specify that the current package replaces an older package with a different name. During
package installing the package that

# Additional flag based on target endiness (see siteinfo.bbclass)
CFLAG="${CFLAG} ${@base_conditional(’SITEINFO_ENDIANESS’, ’le’, ’-DL_ENDIAN’, ’-DB_E......


COMPATIBLE_MACHINE: A list of the machines supported by your new recipe. This variable in the example recipe is set by default to a regular expression that matches only the empty string, "(^$)". This default setting triggers an explicit build failure. You must change it to match a list of the machines that your new recipe supports. For example, to support the qemux86 and qemux86-64 machines, use the following form:

     COMPATIBLE_MACHINE = "qemux86|qemux86-64"
                            
RRECOMMENDS vs RDEPENDS
Because the variable is RRECOMMENDS and not a RDEPENDS variable, the build will not fail if this module is not available to include in the image. 

 As described in the "Generating Configuration Files" section, you can use the following BitBake command to audit your configuration:
     $ bitbake linux-yocto -c kernel_configcheck -f


How do I install/not-install the kernel image on the rootfs?
The kernel image (e.g. vmlinuz) is provided by the kernel-image package. Image recipes depend on kernel-base. To specify whether or not the kernel image is installed in the generated root filesystem, override RDEPENDS_kernel-base to include or not include "kernel-image".
See the "Using .bbappend Files" section in the Yocto Project Development Manual for information on how to use an append file to override metadata. 
            

PREFERRED_PROVIDER_virtual/kernel ?= "linux-yocto"
PREFERRED_VERSION_linux-yocto = "3.4%"

