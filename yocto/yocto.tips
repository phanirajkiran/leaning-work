great
http://apprize.info/linux/beaglebone/4.html

bitbake -c listtasks <recipe> 
bitbake -c compile linux-windriver
==================================================================
OVERRIDES_append = ":${TARGET_ARCH}-${TARGET_OS}"

overrides = localdata.getVar("OVERRIDES", False) + ":virtclass-multilib-" + item
localdata.setVar("OVERRIDES", overrides)
==================================================================================
# Used by multilib code to change the library paths
baselib = "${BASELIB}"
baselib[vardepvalue] = "${baselib}"
BASELIB = "lib"
BASELIB_powerpc64 = "lib64"

# Path prefixes
export base_prefix = ""
export prefix = "/usr"
export exec_prefix = "/usr"

# Base paths
export base_bindir = "${base_prefix}/bin"
export base_sbindir = "${base_prefix}/sbin"
export base_libdir = "${base_prefix}/${baselib}"
export nonarch_base_libdir = "${base_prefix}/lib"

# Architecture independent paths
export datadir = "${prefix}/share"
export sysconfdir = "${base_prefix}/etc"
export servicedir = "${base_prefix}/srv"
export sharedstatedir = "${base_prefix}/com"
export localstatedir = "${base_prefix}/var"
export infodir = "${datadir}/info"
export mandir = "${datadir}/man"
export docdir = "${datadir}/doc"
export systemd_unitdir = "/lib/systemd"

# Architecture dependent paths
export bindir = "${exec_prefix}/bin"
export sbindir = "${exec_prefix}/sbin"
export libdir = "${exec_prefix}/${baselib}"
export libexecdir = "${libdir}/${BPN}"
export includedir = "${exec_prefix}/include"
export oldincludedir = "${exec_prefix}/include"
localedir = "${libdir}/locale"
===============================================================================
replace:
TRANSLATED_TARGET_ARCH ??= "${@d.getVar('TARGET_ARCH', True).replace("_", "-")}"


compile:

===============================================================================
single file : meta-ti

DESCRIPTION = "AM SysInfo"
HOMEPAGE = "https://gforge.ti.com/gf/project/am_sysinfo/"
LICENSE = "BSD"
LIC_FILES_CHKSUM = "file://mem_util/mem_util.c;beginline=1;endline=37;md5=8aa8e714ab729cfe8177298af8a5a25d"

SECTION = "system"

SRCREV = "5"
PV = "1.0"
PR = "r1+svnr${SRCPV}"

SRC_URI = "svn://gforge.ti.com/svn/am_sysinfo/;module=trunk;protocol=https;user=anonymous;pswd=''"

S = "${WORKDIR}/trunk"

do_compile() {
        ${CC} ${CFLAGS} ${LDFLAGS} -o mem_util/mem_util mem_util/mem_util.c
}

do_install() {
        install -d ${D}/${bindir}
        install -m 0755 ${S}/mem_util/mem_util ${D}/${bindir}
}

======================================================================================
KERNEL_VERSION = "${@base_read_file('${STAGING_KERNEL_DIR}/kernel-abiversion')}"

======================================================================================
unset CFLAGS CPPFLAGS CXXFLAGS LDFLAGS

=======================================================================================
recipes-ti/gstreamer-ti/gstreamer-ti.inc:export LINUXKERNEL_INSTALL_DIR = "${STAGING_KERNEL_DIR}"
export后连patch 也认识:

============================================
if you define a new image class

meta-fsl-arm/conf/machine/include/fsl-default-settings.inc:IMAGE_CLASSES += "image_types_fsl"
if you define a new image class


========================================================
EXTRA_OEMAKE = "EGL_FLAVOR=x11 BINDIR=${bindir} DATADIR=${datadir}/${PN}"

do_install_append () {
    install -d ${D}/${datadir}/pixmaps
    install -d ${D}/${datadir}/applications
    install -m 0644 ${WORKDIR}/glcubes-ico.png ${D}/${datadir}/pixmaps
    install -m 0644 ${WORKDIR}/glcubes-demo.desktop ${D}/${datadir}/applications
}

=====================================================================

+LAYERVERSION_cav-octeon2 = "1"
+
+LAYERDEPENDS_cav-octeon2 = "wr-kernel normal"


=========================================================================
print log meta-xilinx
bbnote "Replacing linux kernel powerpc device tree to match located hardware model: virtex${KERNEL_TARGET}.dts"

==========================================================================
# Ship kernel modules
MACHINE_EXTRA_RRECOMMENDS = "kernel-modules"

=========================================================
bind-9.8.1-r4.1/
PRINC = "1"
PR .= ".1"
   bind-9.8.1-r4.1.1/ bind-9.8.1-r5.1/ 


========================================================
recipes-core/tinylogin/tinylogin_1.4.bbappend 

-ALTERNATIVE_${PN} += "login"
+ALTERNATIVE_${PN} += "login passwd"
  ALTERNATIVE_LINK_NAME[login] = "${base_bindir}/login"
+ALTERNATIVE_LINK_NAME[passwd] = "${bindir}/passwd" 

========================================================
license:
oe-core/meta/files/common-licenses
in meta-intel
# Additional license directories.
LICENSE_PATH += "${LAYERDIR}/common/custom-licenses"


=====================================================
如果想要makefile 里得到一个系统的变量，需要在BB 里 export GG="$FF"
然后在makefile 里引用GG



========================================
bitbake multipath-tools -c devshell



=======================================

ALLOW_EMPTY_${PN} = "1"
FILES_${PN}     = ""


========================================

# Note:
# The "subdir" parameter in the SRC_URI is useful when the input package
# is rpm, ipk, deb and so on, for example:
#
# SRC_URI = "http://foo.com/foo-1.0-r1.i586.rpm;subdir=foo-1.0"
#
# Then the files would be unpacked to ${WORKDIR}/foo-1.0, otherwise
# they would be in ${WORKDIR}.
#

# Skip the unwanted steps
do_configure[noexec] = "1"
do_compile[noexec] = "1"

# Install the files to ${D}
bin_package_do_install () {
    # Do it carefully
    [ -d "${S}" ] || exit 1
    cd ${S} || exit 1
    tar --no-same-owner --exclude='./patches' --exclude='./.pc' -cpf - . \
        | tar --no-same-owner -xpf - -C ${D}
}

FILES_${PN} = "/"

EXPORT_FUNCTIONS do_install
~                                                                                                                                                                                                            
"meta/classes/bin_package.bbclass" 36L, 985C 
======================================================================

NOTE: All the file will be unpacked to WORKDIR,
tar.bz2, tar xx.tar.bz2 WORKDIR, so location is WORKIDR/xx
git: clone git:/// git to WORDIR, so location is WORKIDR/git
then all the operation(upack:eg: git checkout ..., find the license) is in S, defualt S=WORKDIR/${BP},if not match, eg: WORKDIR/git is not match, so you need S=WORKDIR/git
WORKDDIR and S is abspath, so find license file by defualt is in S, you can change it to WORKDIR ---> LIC_FILES_CHKSUM = "file://${WORKDIR}/tunctl.c;endline=4;md5=ff3a09996bc5fff6bc5d4e0b4c28f999"

Lei


=========================================================================
PV = "1.0+gitr${SRCPV}"

(06:18:00 PM) lyang0: I have a packages which the latest tag is 1.0. and hasn't update for past two years with new tag, the master is very new, can I use PV = "1.0+gitr${SRCPV}" for this 
(06:19:02 PM) RP: lyang0: The 1.0 has nothing to do with the git version, its really just a way of saying its later than that
=========================================================================
#
meta-sys940x/conf/machine/sys940x.conf:PREFERRED_VERSION_xserver-xorg ?= "1.9.3"

meta/recipes-graphics/xorg-lib/libx11-trim_1.4.4.bb:RPROVIDES_${PN}-dev = "libx11-dev"


meta/recipes-support/libiconv/libiconv_1.11.1.bb:PROVIDES = "virtual/libiconv"
meta/recipes-support/libiconv/libiconv_1.14.bb:PROVIDES = "virtual/libiconv"

meta/recipes-graphics/xorg-lib/libxext_git.bb:PROVIDES = "xext"
meta/recipes-graphics/xorg-lib/libxtst_1.2.1.bb:PROVIDES = "xtst"



PROVIDES = "virtual/libintl virtual/gettext" ??? 
---------------------------------------------------------------
meta/recipes-core/kbd/kbd_1.15.2.bb:RPROVIDES_${PN} = "console-tools"
========> 
meta/conf/distro/include/default-providers.inc:PREFERRED_PROVIDER_console-tools ?= "kbd"



meta/recipes-core/gettext/gettext_0.16.1.bb:PROVIDES = "virtual/libintl virtual/gettext"
=======================> 
meta/conf/distro/include/tcmode-default.inc:PREFERRED_PROVIDER_virtual/gettext ??= "gettext"

==========================================
DEFAULT_PREFERENCE = "-1"
The default preference (when no DEFAULT_PREFERENCE is specified) is zero

===========================================
[lyang0@ala-lpggp2 meta-oe]$ grep "jpeg" * -r |grep PROVIDES
meta-oe/recipes-core/jpeg/libjpeg-turbo_svn.bb:PROVIDES = "jpeg"

meta-oe/recipes-support/fltk/fltk_1.1.10.bb:DEPENDS = "alsa-lib zlib jpeg libpng libxext libxft"



Add RPROVIDES to fix errors when rdepending on jpeg
this fixes "ERROR: Multiple .bb files are due to be built which each provide jpeg"
+RPROVIDES_${PN} = "jpeg"


meta-systemd/recipes-core/systemd/systemd_git.bb:RPROVIDES_udev = "hotplug"

==============================================================


RPROVIDES
Used to explicitly specify what a package provides at runtime. For example hotplug support is
provided by several packages, such as udev and linux-hotplug. Both declare that they runtime
provide "hotplug". So any packages that require "hotplug" to work simply declare that it
RDEPENDS on "hotplug". It’s up to the distribution to specify which actual implementation of
"virtual/xserver" is used.


PROVIDES
Used to explicitly specify what a package provides at build time. This is typically used when two or
more packages can provide the same functionality. For example there are several different X servers
in OpenEmbedded, and each as declared as providing "virtual/xserver". Therefore a package that
depends on an X server to build can simply declare that it DEPENDS on "virtual/xserver". It’s up to
the distribution to specify which actual implementation of "virtual/xserver" is used.


RREPLACES
Used to specify that the current package replaces an older package with a different name. During
package installing the package that is being replaced will be removed since it is no longer needed
when this package is installed.


${@bb.utils.contains("KERNEL_ALL_DEBUG", "1", "file://${TOPDIR}/all_noises.cfg", "file://${TOPDIR}/empty.cfg" ,d)} \
#RANDOM_INC ?= "${@bb.utils.contains("KERNEL_RANDOM_CFG", "1", "kernel-test.inc", "empty.inc", d)}"
#require ${RANDOM_INC}

ZZ := "${THISDIR}" ------> bbapend 
ZZ := "${@os.path.dirname(d.getVar('FILE', True))}" ------->template.conf


http://www.xlgps.com/article/186662.html

https://github.com/openembedded/openembedded-core/blob/master/meta-skeleton/recipes-multilib/images/core-image-multilib-example.bb
IMAGE_INSTALL += "lib32-bash"


function should use ":=" to call it 
global variable in bb ,it should use ${} when calling it 


IVI_COREBASE := '${@os.path.normpath("${LAYERDIR}/../")}'
save_cwd = os.getcwd()
 os.chdir(save_cwd)

python fsl_bin_do_unpack() {

TOPDIR := '${@os.path.dirname(os.path.dirname(FILE))}'

bb.build.exec_func('fsl_bin_do_unpack', d)
