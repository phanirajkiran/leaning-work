http://www.grymoire.com/Unix/Sed.html
小结：
sed中可直接使用的RE：
*  .  ^  $  [  ]  \  c 
\w ( 相当于[A-Za-z_] )  \W ( 相当于[^A-Za-z_] ) 
sed中需转义使用的RE：
+  ?  {  }  (  )  |  <  > 
其他：
\d (d)  \D (D)  \s (s)  \S (S) 
匹配 单引号’ 用双引号
匹配 反引号` 用单引号
\b 匹配单词的前或后边界 ( 字符[^A-Za-z0-9_]均构成单词边界 )
\B 匹配单词的非边界 ( 字符[^A-Za-z0-9_]均构成单词边界 )
\< 匹配单词的位置前 ( 字符[^A-Za-z0-9_]均构成单词边界 )
\> 匹配单词的位置后 ( 字符[^A-Za-z0-9_]均构成单词边界 )
支持十进制，格式为“\d + 两位或三位十进制数”，如“\d065 或\d65 均代表字符 A ”
支持十六进制，格式为“\x + 两位十六进制数”，如“\x61 代表字符 A ”
支持八进制，格式为“\o + 两位或三位八进制数”，如“\o077 或\o77 均代表字符 ？，\o101代表字符 A ”
http://www.ixpub.net/thread-1463174-1-1.html

x\{m\}
重复字符x，m次，如：/0\{5\}/匹配包含5个o的行。

x\{m,\}
重复字符x,至少m次，如：/o\{5,\}/匹配至少有5个o的行。

x\{m,n\}
重复字符x，至少m次，不多于n次，如：/o\{5,10\}/匹配5--10个o的行。


lyang0@lyang0-OptiPlex-755:~/del$ echo "mmm1000" |sed 's/[^0-9]//g'
1000

在文件file.txt中含有insert的行前面加入文件insert.file
[root@linuxso.com zhaoyj]# sed -e '/insert/{h;s/.*/cat insert.file/e;G}' file.txt 

在文件file.txt中含有insert的行后面加入文件insert.file
[root@linuxso.com zhaoyj]# sed -e '/insert/{p;s/.*/cat insert.file/e;}' file.txt 

#match the whole word
sed -n '/\(ok\)\{3\}/p'
OR
sed -n '/\(ok\)\1\1/p'


lyang0@lyang0-OptiPlex-755:~/del$ sed 's/[a-zA-Z]*//2gp' 9
a   
a   
1 12 345 
1 12 345 
xd_ '
xd_ '
lyang0@lyang0-OptiPlex-755:~/del$ sed 's/[a-zA-Z]*//2p' 9
a  ab abcd
a  ab abcd
1 12 345 a
1 12 345 a
xd_ he's
xd_ he's

Sed 变量, 还有里面有' '的要用""来括起来

sed 's/foo/bar/4'                # 只替换每一行中的第四个“foo”字串

sed '/foo\|bar/s/green/lei/g' 
OR
sed -r '/foo|bar/s/green/lei/g' 


sed '/foo/ s/foo/bar/g' filename   # executes more quickly

sed '$d' 删除最后一行
sed '1d;$d'  Delete the first line AND the last line of a file,

$ sed '/[xX]$/d' file Delete all lines ending with either x or X


Delete the lines containing the pattern 'Solaris' only if it is present in the lines from 1 to 4
$ sed '1,4{/Solaris/d;}' file

变量: 外面用双括号
sum=27
sed "s/AMOUNTTOBEREPLACED/$sum/g" File1.txt >> temp
OR
sed 's/AMOUNTTOBEREPLACED/'"$sum"'/g'


sed 's:/usr/local/bin:/common/bin:' <old >new

The solution requires the special character "&." It corresponds to the pattern found.
sed 's/[a-z]*/(&)/' <old >new

you use the "-r" command line option, which enables extended regular expressions. The "+" means "one or more matches"
% echo "123 abc" | sed -r 's/[0-9]+/& &/'
123 123 abc

sed 's/\([a-z]*\) \([a-z]*\)/\2 \1/'

This flag makes the pattern match case insensitive. This will match abc, aBc, ABC, AbC, etc.: 
sed '/abc/I' <old >new

sed -e 's/a/A/' -e 's/b/B/' <old >new
sed -e 's/a/A/g' \
    -e 's/e/E/g' \
    -e 's/i/I/g' \
    -e 's/o/O/g' \
    -e 's/u/U/g'  <old >new


范围:
sed '101,532 s/A/a/'
sed '101,$ s/A/a/'
sed '/start/,/stop/ s/#.*//'
sed -e '1,/start/ s/#.*//'
sed -e '1,/start/ s/#.*//' -e '/stop/,$ s/#.*//'



#!/bin/sh
# This is a Bourne shell script that removes #-type comments
# between 'begin' and 'end' words.
sed -n '
	/begin/,/end/ {
	     s/#.*//
	     s/[ ^I]*$//
	     /^$/ d
	     p
	}
'

#!/bin/sh
sed '
	/begin/,/end/ {
	    /begin/n # skip over the line that has "begin" on it
	    s/old/new/
	}
'

contains BOTH "AA" and "BB" better to use awk
awk '/AA/ && /BB/' file |sed .....
