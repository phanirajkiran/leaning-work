http://web.cecs.pdx.edu/~jrb/cs201/lectures/handouts/gdbcomm.txt

lyang001@lyang001-OptiPlex-9010:/tmp$ gcc -g -o test test.c
lyang001@lyang001-OptiPlex-9010:/tmp$ cat test.c 
#include <stdio.h>

int main(void)

{

    printf("hello world! dump core for set value to NULL pointer/n");

    *(char *)0 = 0;

    return 0;

}

lyang001@lyang001-OptiPlex-9010:/tmp$ ulimit -c unlimited
lyang001@lyang001-OptiPlex-9010:/tmp$ ./test 
Segmentation fault (core dumped)

lyang001@lyang001-OptiPlex-9010:/tmp$ gdb ./test core 
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /tmp/test...done.
[New LWP 11482]

warning: Can't read pathname for load map: Input/output error.
Core was generated by `./test'.
Program terminated with signal 11, Segmentation fault.
#0  0x000000000040050f in main () at test.c:9
9	    *(char *)0 = 0;
(gdb) l
4	
5	{
6	
7	    printf("hello world! dump core for set value to NULL pointer/n");
8	
9	    *(char *)0 = 0;
10	
11	    return 0;
12	
13	}


=========================================================================================================
(gdb) info line *0x63ff
Line 926 of "builtin.c" starts at pc 0x63e4 and ends at 0x6404.

==================================================================================================
(gdb) disassemble /m
Dump of assembler code for function main:
5	{
   0x00000000004004f4 <+0>:	push   %rbp
   0x00000000004004f5 <+1>:	mov    %rsp,%rbp

6	
7	    printf("hello world! dump core for set value to NULL pointer/n");
=> 0x00000000004004f8 <+4>:	mov    $0x400610,%eax
   0x00000000004004fd <+9>:	mov    %rax,%rdi
   0x0000000000400500 <+12>:	mov    $0x0,%eax
   0x0000000000400505 <+17>:	callq  0x4003f0 <printf@plt>

8	
9	    *(char *)0 = 0;
   0x000000000040050a <+22>:	mov    $0x0,%eax
   0x000000000040050f <+27>:	movb   $0x0,(%rax)

10	
11	    return 0;
   0x0000000000400512 <+30>:	mov    $0x0,%eax

12	
13	}
   0x0000000000400517 <+35>:	pop    %rbp
   0x0000000000400518 <+36>:	retq   

End of assembler dump.


|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


(gdb) disassemble /m 0x4004f4,0x400505
Dump of assembler code from 0x4004f4 to 0x400505:
5	{
   0x00000000004004f4 <main+0>:	push   %rbp
   0x00000000004004f5 <main+1>:	mov    %rsp,%rbp

6	
7	    printf("hello world! dump core for set value to NULL pointer/n");
=> 0x00000000004004f8 <main+4>:	mov    $0x400610,%eax
   0x00000000004004fd <main+9>:	mov    %rax,%rdi
   0x0000000000400500 <main+12>:	mov    $0x0,%eax
   0x0000000000400505 <main+17>:	callq  0x4003f0 <printf@plt>

End of assembler dump.

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

 	

(gdb) disas /m main
Dump of assembler code for function main:
5       {
0x08048330 <main+0>:    push   %ebp
0x08048331 <main+1>:    mov    %esp,%ebp
0x08048333 <main+3>:    sub    $0x8,%esp
0x08048336 <main+6>:    and    $0xfffffff0,%esp
0x08048339 <main+9>:    sub    $0x10,%esp

6         printf ("Hello.\n");
0x0804833c <main+12>:   movl   $0x8048440,(%esp)
0x08048343 <main+19>:   call   0x8048284 <puts@plt>

7         return 0;
8       }
0x08048348 <main+24>:   mov    $0x0,%eax
0x0804834d <main+29>:   leave
0x0804834e <main+30>:   ret

End of assembler dump.

==============================================================================================================
(gdb) info sharedlibrary
From                To                  Syms Read   Shared Object Library
0x00007ffff7ddaaf0  0x00007ffff7df4eaa  Yes (*)     /lib64/ld-linux-x86-64.so.2
0x00007ffff7a39fa0  0x00007ffff7b7de90  Yes (*)     /lib/x86_64-linux-gnu/libc.so.6
(*): Shared library is missing debugging information.


=============================================================================================================

lyang001@lyang001-OptiPlex-9010:/tmp$ gdb test
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /tmp/test...done.
(gdb) start 
Temporary breakpoint 1 at 0x4004f8: file test.c, line 7.
Starting program: /tmp/test 

Temporary breakpoint 1, main () at test.c:7
7	    printf("hello world! dump core for set value to NULL pointer/n");
(gdb) set disassemble-next-line on
(gdb) n
9	    *(char *)0 = 0;
=> 0x000000000040050a <main+22>:	b8 00 00 00 00	mov    $0x0,%eax
   0x000000000040050f <main+27>:	c6 00 00	movb   $0x0,(%rax)
(gdb) n

Program received signal SIGSEGV, Segmentation fault.
0x000000000040050f in main () at test.c:9
9	    *(char *)0 = 0;
   0x000000000040050a <main+22>:	b8 00 00 00 00	mov    $0x0,%eax
=> 0x000000000040050f <main+27>:	c6 00 00	movb   $0x0,(%rax)

